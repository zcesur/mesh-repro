{
  "consumes": ["application/json", "text/plain"],
  "produces": ["application/json", "text/html"],
  "schemes": ["http", "https"],
  "swagger": "2.0",
  "info": {
    "description": "This documentation describes the Algora API.",
    "title": "Algora API.",
    "version": "1.1.1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/admin/activity/founders": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List activity of all founders",
        "operationId": "adminListFounderActivity",
        "parameters": [
          {
            "type": "integer",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FounderActivityList"
          }
        }
      }
    },
    "/admin/activity/invitees": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List activity of all invitees",
        "operationId": "adminListInviteeActivity",
        "parameters": [
          {
            "type": "integer",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/InviteeActivityList"
          }
        }
      }
    },
    "/admin/activity/solvers": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List activity of all solvers",
        "operationId": "adminListSolverActivity",
        "parameters": [
          {
            "type": "integer",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SolverActivityList"
          }
        }
      }
    },
    "/admin/bounties": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List all bounties",
        "operationId": "adminListBounties",
        "parameters": [
          {
            "type": "string",
            "description": "whether bounty is open or closed",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page number of requested bounties",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountyList"
          }
        }
      }
    },
    "/admin/documents": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List documents",
        "operationId": "adminListDocuments",
        "responses": {
          "200": {
            "$ref": "#/responses/DocumentList"
          }
        }
      }
    },
    "/admin/email/digest": {
      "post": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Send job digest emails to given users",
        "operationId": "adminSendJobDigestEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SendJobDigestEmailOption"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Email"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "422": {
            "$ref": "#/responses/error"
          }
        }
      }
    },
    "/admin/email/identifiers": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List email identifiers",
        "operationId": "adminListEmailIdentifiers",
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/admin/email/template": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Get email template",
        "operationId": "adminGetEmailTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "name of the template",
            "name": "template",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Render an email",
        "operationId": "adminRenderEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RenderEmailOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Email"
          },
          "400": {
            "$ref": "#/responses/error"
          }
        }
      }
    },
    "/admin/email/templates": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List all email templates",
        "operationId": "adminListEmailTemplates",
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/admin/emails": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List emails",
        "operationId": "adminListEmails",
        "parameters": [
          {
            "type": "integer",
            "description": "page number of requested emails",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "name": "identifier",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmailList"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create and send an email",
        "operationId": "adminCreateNewEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateEmailOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Email"
          }
        }
      }
    },
    "/admin/entities": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create entity",
        "operationId": "adminCreateEntity",
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEntityOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Entity"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/entities/{id}/logo": {
      "patch": {
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Edit an entity's logo",
        "operationId": "adminEditEntityLogo",
        "parameters": [
          {
            "type": "integer",
            "description": "id of entity to edit",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "logo to upload",
            "name": "logo",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Entity"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/metrics": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Get the platform metrics",
        "operationId": "adminGetMetrics",
        "parameters": [
          {
            "enum": ["Founder", "Solver"],
            "type": "string",
            "description": "user kind",
            "name": "kind",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Metrics"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/orgs/{org}/avatar": {
      "patch": {
        "consumes": ["application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Edit an org's avatar",
        "operationId": "adminEditOrgAvatar",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization to edit",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "binary",
            "description": "avatar to upload",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/orgs/{org}/teams/{team}/members/{username}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Add a team member",
        "operationId": "adminAddOrgTeamMember",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the team",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user to add",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/admin/preorgs": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create a pre-org",
        "operationId": "adminCreatePreOrg",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePreOrgOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/preorgs/{preorg}": {
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Edit a pre-org",
        "operationId": "adminEditPreOrg",
        "parameters": [
          {
            "type": "string",
            "description": "name of pre-org to get",
            "name": "preorg",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditPreOrgOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PreOrg"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/preusers/startups": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List all pre-user startups",
        "operationId": "adminListPreUserStartups",
        "parameters": [
          {
            "type": "integer",
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "enum": ["oldest"],
            "type": "string",
            "description": "Type of sort",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AdminPreUserStartupList"
          }
        }
      }
    },
    "/admin/preusers/students": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List all pre-user students",
        "operationId": "adminListPreUserStudents",
        "parameters": [
          {
            "type": "integer",
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "enum": ["oldest"],
            "type": "string",
            "description": "Type of sort",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AdminPreUserStudentList"
          }
        }
      }
    },
    "/admin/preusers/students/{id}/resume": {
      "put": {
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Add a resume on behalf of the given student",
        "operationId": "adminPreUserStudentAddResume",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the pre-user",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "resume to upload",
            "name": "resume",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AdminPreUserStudent"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/admin/repos/{owner}/{repo}/pulls/{index}/payment": {
      "put": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Mark pull request as paid",
        "operationId": "adminMarkPullRequestAsPaid",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PullRequest"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/admin/requests": {
      "get": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "List requests",
        "operationId": "adminListRequests",
        "responses": {
          "200": {
            "$ref": "#/responses/RequestList"
          }
        }
      }
    },
    "/admin/user/password": {
      "post": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create a new password reset code for the user with the given email",
        "operationId": "adminUserCreatePassword",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePasswordOption"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "description": "a reset code for the user",
              "type": "string"
            }
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create a user",
        "operationId": "adminCreateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AdminCreateUserOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/insts": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create an institution",
        "operationId": "adminCreateInst",
        "parameters": [
          {
            "name": "institution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInstOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Institution"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/{username}": {
      "delete": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Delete a user",
        "operationId": "adminDeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "username of user to delete",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Edit an existing user",
        "operationId": "adminEditUser",
        "parameters": [
          {
            "type": "string",
            "description": "username of user to edit",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AdminEditUserOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/{username}/avatar": {
      "patch": {
        "consumes": ["application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Edit a user's avatar",
        "operationId": "adminEditUserAvatar",
        "parameters": [
          {
            "type": "string",
            "description": "username of user to edit",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "binary",
            "description": "avatar to upload",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/{username}/education": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Add an education",
        "operationId": "adminAddEducation",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddEducationOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/{username}/experience": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Add an experience",
        "operationId": "adminAddExperience",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddExperienceOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/{username}/keys": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Add a public key on behalf of a user",
        "operationId": "adminCreatePublicKey",
        "parameters": [
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "key",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateKeyOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublicKey"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/{username}/keys/{id}": {
      "delete": {
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Delete a user's public key",
        "operationId": "adminDeleteUserPublicKey",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the key to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/admin/users/{username}/orgs": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create an organization",
        "operationId": "adminCreateOrg",
        "parameters": [
          {
            "type": "string",
            "description": "username of the user that will own the created organization",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrgOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/admin/users/{username}/repos": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["admin"],
        "summary": "Create a repository on behalf a user",
        "operationId": "adminCreateRepo",
        "parameters": [
          {
            "type": "string",
            "description": "username of the user. This user will own the created repository",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRepoOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/bounties": {
      "get": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "List the bounties that the authenticated user has access to",
        "operationId": "bountyListBounties",
        "parameters": [
          {
            "type": "string",
            "description": "whether bounty is open or closed",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page number of requested bounties",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountyList"
          }
        }
      }
    },
    "/bounties/{institution}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "List the public bounties that are created by a user or an organization that is associated with the given institution as well as the community bounties that are available to solvers from the given institution.",
        "operationId": "bountyListInstitutionBounties",
        "parameters": [
          {
            "type": "string",
            "description": "name of the institution",
            "name": "institution",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "whether bounty is open or closed",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page number of requested bounties",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountyList"
          }
        }
      }
    },
    "/businesses": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["business"],
        "summary": "Create a business",
        "operationId": "businessCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateBusinessOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Business"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/chat/{owner}/{repo}/{page}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["chat"],
        "summary": "List the chat messages of a repo",
        "operationId": "chatGetMessages",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "page number of requested messages",
            "name": "page",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MessageList"
          }
        }
      }
    },
    "/insts/{inst}/depts": {
      "get": {
        "produces": ["application/json"],
        "tags": ["institution"],
        "summary": "List an institution's departments",
        "operationId": "instListDepts",
        "parameters": [
          {
            "type": "string",
            "description": "name of the institution",
            "name": "inst",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TeamList"
          }
        }
      }
    },
    "/invitation/{hash}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["misc"],
        "summary": "Get invitation data",
        "operationId": "getInvitationData",
        "parameters": [
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/job/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["job"],
        "summary": "Get the job with the given id",
        "operationId": "jobGetJob",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobPosting"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "produces": ["application/json"],
        "tags": ["job"],
        "summary": "List all available jobs",
        "operationId": "jobListJobs",
        "parameters": [
          {
            "type": "string",
            "description": "name of the institution",
            "name": "institution",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobPostingList"
          }
        }
      }
    },
    "/jobs/{token}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["job"],
        "summary": "Get the job associated with the provided invitation token",
        "operationId": "jobGetJobByToken",
        "parameters": [
          {
            "type": "string",
            "description": "invitation token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobPosting"
          }
        }
      }
    },
    "/markdown": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["text/html"],
        "tags": ["miscellaneous"],
        "summary": "Render a markdown document as HTML",
        "operationId": "renderMarkdown",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MarkdownOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MarkdownRender"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/markdown/raw": {
      "post": {
        "consumes": ["text/plain"],
        "produces": ["text/html"],
        "tags": ["miscellaneous"],
        "summary": "Render raw markdown as HTML",
        "operationId": "renderMarkdownRaw",
        "parameters": [
          {
            "description": "Request body to render",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MarkdownRender"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/misc/github/orgs/{org}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["github"],
        "summary": "Get a Github organization",
        "operationId": "githubOrgGet",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization to get",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/misc/github/repos/migrate": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["github"],
        "summary": "Migrate a remote GitHub repository to Algora",
        "operationId": "githubMigrateRepo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MigrateRepoForm"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          }
        }
      }
    },
    "/misc/github/repos/{owner}/{repo}/issues": {
      "get": {
        "produces": ["application/json"],
        "tags": ["github"],
        "summary": "List the issues of a remote GitHub repository",
        "operationId": "githubRepoListIssues",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/misc/github/user/repos": {
      "get": {
        "produces": ["application/json"],
        "tags": ["github"],
        "summary": "List the GitHub repos for the authenticated user",
        "operationId": "githubListUserRepos",
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/org/{org}/repos": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a repository in an organization",
        "operationId": "createOrgRepo",
        "parameters": [
          {
            "type": "string",
            "description": "name of organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateRepoOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/orgs": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create an organization",
        "operationId": "orgCreate",
        "parameters": [
          {
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrgOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/orgs/{org}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Get an organization",
        "operationId": "orgGet",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization to get",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Delete an organization",
        "operationId": "orgDelete",
        "parameters": [
          {
            "type": "string",
            "description": "organization that is to be deleted",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Edit an organization",
        "operationId": "orgEdit",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization to edit",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditOrgOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          }
        }
      }
    },
    "/orgs/{org}/avatar": {
      "patch": {
        "consumes": ["application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Edit an org's avatar",
        "operationId": "orgEditAvatar",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization to edit",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "binary",
            "description": "new avatar",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/orgs/{org}/bounties": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List an organization's bounties",
        "operationId": "orgListBounties",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountyList"
          }
        }
      }
    },
    "/orgs/{org}/contracts": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List all active contracts",
        "operationId": "orgListContracts",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContractList"
          }
        }
      }
    },
    "/orgs/{org}/contracts/{username}": {
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a contract",
        "operationId": "orgCreateContract",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateContractOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Contract"
          }
        }
      }
    },
    "/orgs/{org}/documents": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List all active documents",
        "operationId": "orgListDocuments",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DocumentList"
          }
        }
      },
      "post": {
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a document",
        "operationId": "orgCreateDocument",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the document",
            "name": "name",
            "in": "query"
          },
          {
            "type": "file",
            "description": "document to upload",
            "name": "document",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Document"
          },
          "400": {
            "$ref": "#/responses/error"
          }
        }
      }
    },
    "/orgs/{org}/documents/{uuid}": {
      "post": {
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a signed document",
        "operationId": "orgCreateSignedDocument",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "UUID of the original document that is signed",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the document",
            "name": "name",
            "in": "query"
          },
          {
            "type": "file",
            "description": "document to upload",
            "name": "document",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Document"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/orgs/{org}/hooks": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List an organization's webhooks",
        "operationId": "orgListHooks",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HookList"
          }
        }
      }
    },
    "/orgs/{org}/hooks/": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a hook",
        "operationId": "orgCreateHook",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateHookOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Hook"
          }
        }
      }
    },
    "/orgs/{org}/hooks/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Get a hook",
        "operationId": "orgGetHook",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the hook to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Hook"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Delete a hook",
        "operationId": "orgDeleteHook",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the hook to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Update a hook",
        "operationId": "orgEditHook",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the hook to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditHookOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Hook"
          }
        }
      }
    },
    "/orgs/{org}/interviews": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List interviews",
        "operationId": "orgListInterviews",
        "responses": {
          "200": {
            "$ref": "#/responses/InterviewList"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create an interview",
        "operationId": "orgCreateInterview",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateInterviewOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Interview"
          }
        }
      }
    },
    "/orgs/{org}/job_postings": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List job postings",
        "operationId": "orgListJobPostings",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobPostingList"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a job posting",
        "operationId": "orgCreateJobPosting",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateJobPostingOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobPosting"
          }
        }
      }
    },
    "/orgs/{org}/job_postings/{post}": {
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Edit a job posting",
        "operationId": "orgEditJobPosting",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job posting",
            "name": "post",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditJobPostingOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobPosting"
          },
          "404": {
            "$ref": "#/responses/empty"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/orgs/{org}/job_postings/{post}/applications": {
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create an application to a job posting",
        "operationId": "orgJobPostingApply",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job posting",
            "name": "post",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApplyToJobOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobCandidate"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/orgs/{org}/job_postings/{post}/bounties/{bounty}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Link a bounty to a job posting",
        "operationId": "orgJobPostingLinkBounty",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job posting",
            "name": "post",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the bounty",
            "name": "bounty",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/orgs/{org}/job_postings/{post}/candidates": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List candidates of a job posting",
        "operationId": "orgJobPostingListCandidates",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job posting",
            "name": "post",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobCandidateList"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Add candidates to a job posting",
        "operationId": "orgJobPostingAddCandidate",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job posting",
            "name": "post",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddJobCandidatesOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobCandidateList"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/orgs/{org}/job_postings/{post}/interviews/{interview}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Link a interview to a job posting",
        "operationId": "orgJobPostingLinkInterview",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job posting",
            "name": "post",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the interview",
            "name": "interview",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/orgs/{org}/job_postings/{post}/issues/{repo}/{index}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Link a issue to a job posting",
        "operationId": "orgJobPostingLinkIssue",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the job posting",
            "name": "post",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the repository",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/orgs/{org}/members": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List an organization's members",
        "operationId": "orgListMembers",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OrgMemberList"
          }
        }
      }
    },
    "/orgs/{org}/members/{username}": {
      "get": {
        "tags": ["organization"],
        "summary": "Check if a user is a member of an organization",
        "operationId": "orgIsMember",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "user is a member"
          },
          "404": {
            "description": "user is not a member"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Remove a member from an organization",
        "operationId": "orgDeleteMember",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "member removed"
          }
        }
      }
    },
    "/orgs/{org}/owners": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List an organization's owners",
        "operationId": "orgListOwners",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OrgMemberList"
          }
        }
      }
    },
    "/orgs/{org}/payments": {
      "get": {
        "produces": ["application/json"],
        "tags": ["org"],
        "summary": "List payments of the org",
        "operationId": "orgListPayments",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "page number of requested payments",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PaymentList"
          }
        }
      }
    },
    "/orgs/{org}/projects": {
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a project",
        "operationId": "orgCreateProject",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateProjectOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LabProject"
          }
        }
      }
    },
    "/orgs/{org}/projects/{project}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Get a project",
        "operationId": "orgGetProject",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LabProject"
          }
        }
      }
    },
    "/orgs/{org}/projects/{project}/sprints": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List the sprints of a project",
        "operationId": "orgListProjectSprints",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectSprintList"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a project sprint",
        "operationId": "orgCreateProjectSprint",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateProjectSprintOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectSprint"
          }
        }
      }
    },
    "/orgs/{org}/projects/{project}/sprints/{id}/contributors/{username}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Add a contributor to a project sprint",
        "operationId": "orgAddProjectContributor",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the sprint",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the contributor to add",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddProjectContributorOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectContributor"
          }
        }
      }
    },
    "/orgs/{org}/projects/{project}/sprints/{id}/sponsors": {
      "post": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Sponsor a project",
        "operationId": "orgSponsorProject",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the sprint",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SponsorProjectOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectSponsor"
          }
        }
      }
    },
    "/orgs/{org}/public_members": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List an organization's public members",
        "operationId": "orgListPublicMembers",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OrgMemberList"
          }
        }
      }
    },
    "/orgs/{org}/public_members/{username}": {
      "get": {
        "tags": ["organization"],
        "summary": "Check if a user is a public member of an organization",
        "operationId": "orgIsPublicMember",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "user is a public member"
          },
          "404": {
            "description": "user is not a public member"
          }
        }
      },
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Publicize a user's membership",
        "operationId": "orgPublicizeMember",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "membership publicized"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Conceal a user's membership",
        "operationId": "orgConcealMember",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/orgs/{org}/repos": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List an organization's repos",
        "operationId": "orgListRepos",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      }
    },
    "/orgs/{org}/subscription": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Get the subscription of an organization",
        "operationId": "orgGetSubscription",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization to get",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Subscription"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/orgs/{org}/teams": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List an organization's teams",
        "operationId": "orgListTeams",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TeamList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Create a team",
        "operationId": "orgCreateTeam",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateTeamOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Team"
          }
        }
      }
    },
    "/orgs/{org}/teams/{team}/members": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List a team's members",
        "operationId": "orgListTeamMembersByName",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the team",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/orgs/{org}/teams/{team}/members/{username}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Add a team member",
        "operationId": "orgAddTeamMemberByName",
        "parameters": [
          {
            "type": "string",
            "description": "name of the organization",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the team",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user to add",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/preorgs/jobs": {
      "get": {
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "List all available jobs",
        "operationId": "listPreOrgJobs",
        "parameters": [
          {
            "type": "string",
            "description": "name of the institution",
            "name": "institution",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobPostingList"
          }
        }
      }
    },
    "/preorgs/{preorg}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "Get a pre-org",
        "operationId": "getPreOrg",
        "parameters": [
          {
            "type": "string",
            "description": "name of pre-org to get",
            "name": "preorg",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PreOrg"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/preorgs/{preorg}/claim_profile": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["misc"],
        "summary": "Claim profile from pre-org",
        "operationId": "preOrgClaimProfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ClaimProfileOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/preorgs/{preorg}/job_postings/{post}/candidates": {
      "get": {
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "List candidates of a pre-org's job posting",
        "operationId": "preOrgJobPostingListCandidates",
        "parameters": [
          {
            "type": "string",
            "description": "name of the pre-org",
            "name": "preorg",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the job posting",
            "name": "job",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PreUserStudentList"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/preusers/startups": {
      "get": {
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "List all pre-user startups",
        "operationId": "listPreUserStartups",
        "parameters": [
          {
            "type": "integer",
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "enum": ["oldest"],
            "type": "string",
            "description": "Type of sort",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PreUserStartupList"
          }
        }
      }
    },
    "/preusers/students": {
      "get": {
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "List all pre-user students",
        "operationId": "listPreUserStudents",
        "parameters": [
          {
            "type": "integer",
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "enum": ["oldest", "newest"],
            "type": "string",
            "description": "Type of sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the school",
            "name": "school",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Tech stack",
            "name": "tech",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PreUserStudentList"
          }
        }
      }
    },
    "/repos/migrate": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Migrate a remote git repository",
        "operationId": "repoMigrate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MigrateRepoForm"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          }
        }
      }
    },
    "/repos/search": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Search for repositories",
        "operationId": "repoSearch",
        "parameters": [
          {
            "type": "string",
            "description": "keyword",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "search only for repos that the user with the given id owns or contributes to",
            "name": "uid",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page number of results to return (1-based)",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page size of results, maximum page size is 50",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "type of repository to search for. Supported values are \"fork\", \"source\", \"mirror\" and \"collaborative\"",
            "name": "mode",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "if `uid` is given, search only for repos that the user owns",
            "name": "exclusive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort repos by attribute. Supported values are \"alpha\", \"created\", \"updated\", \"size\", and \"id\". Default is \"alpha\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort order, either \"asc\" (ascending) or \"desc\" (descending). Default is \"asc\", ignored if \"sort\" is not specified.",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchResults"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a repository",
        "operationId": "repoGet",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Delete a repository",
        "operationId": "repoDelete",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo to delete",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo to delete",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/archive/{archive}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get an archive of a repository",
        "operationId": "repoGetArchive",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "archive to download, consisting of a git reference and archive",
            "name": "archive",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/bounties": {
      "get": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "List a repository's bounties",
        "operationId": "bountyListRepoBounties",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "whether bounty is open or closed",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page number of requested bounties",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "search string",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountyList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/bounties/{index}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Get a bounty",
        "operationId": "bountyGetBounty",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Bounty"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Create a bounty",
        "operationId": "bountyCreateBounty",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateBountyOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Bounty"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Delete a bounty",
        "operationId": "bountyDeleteBounty",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/bounties/{index}/applications": {
      "post": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Create a request to solve a bounty",
        "operationId": "bountyRequestToSolve",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the bounty",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountyCandidate"
          },
          "200": {
            "$ref": "#/responses/BountyCandidate"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/bounties/{index}/invitees": {
      "put": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Create a bounty",
        "operationId": "bountyInviteSolver",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InviteSolverOption"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/bounties/{index}/progress": {
      "get": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Get the progress of the current user in solving a bounty",
        "operationId": "userCurrentGetProgress",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the bounty",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SolutionProgress"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Create the progress of the current user in solving a bounty",
        "operationId": "userCurrentCreateProgress",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the bounty",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountySolutionProgress"
          },
          "200": {
            "$ref": "#/responses/BountySolutionProgress"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "patch": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "Update the progress of the current user in solving a bounty",
        "operationId": "userCurrentUpdateProgress",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the bounty",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProgressOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountySolutionProgress"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/bounties/{index}/pulls": {
      "get": {
        "produces": ["application/json"],
        "tags": ["bounty"],
        "summary": "List the pull requests targeting a bounty",
        "operationId": "bountyListPullRequests",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the bounty",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PullRequestList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repository's branches",
        "operationId": "repoListBranches",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BranchList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Retrieve a specific branch from a repository",
        "operationId": "repoGetBranch",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "branch to get",
            "name": "branch",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Branch"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repository's collaborators",
        "operationId": "repoListCollaborators",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators/{collaborator}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Check if a user is a collaborator of a repository",
        "operationId": "repoCheckCollaborator",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the collaborator",
            "name": "collaborator",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "put": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Add a collaborator to a repository",
        "operationId": "repoAddCollaborator",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the collaborator to add",
            "name": "collaborator",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddCollaboratorOption"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Delete a collaborator from a repository",
        "operationId": "repoDeleteCollaborator",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the collaborator to delete",
            "name": "collaborator",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/statuses": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a commit's combined status, by branch/tag/commit reference",
        "operationId": "repoGetCombinedStatusByRef",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of branch/tag/commit",
            "name": "ref",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Status"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/editorconfig/{filepath}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get the EditorConfig definitions of a file in a repository",
        "operationId": "repoGetEditorConfig",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "filepath of file to get",
            "name": "filepath",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/fork": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get the fork of a repository belonging to the current user",
        "operationId": "userCurrentGetFork",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/forks": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repository's forks",
        "operationId": "listForks",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Fork a repository",
        "operationId": "createFork",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo to fork",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo to fork",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateForkOption"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Repository"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get specified ref or filtered repository's refs",
        "operationId": "repoListAllGitRefs",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReferenceList"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs/{ref}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get specified ref or filtered repository's refs",
        "operationId": "repoListGitRefs",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "part or full name of the ref",
            "name": "ref",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReferenceList"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List the hooks in a repository",
        "operationId": "repoListHooks",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HookList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Create a hook",
        "operationId": "repoCreateHook",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateHookOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Hook"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a hook",
        "operationId": "repoGetHook",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the hook to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Hook"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Delete a hook in a repository",
        "operationId": "repoDeleteHook",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the hook to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "patch": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Edit a hook in a repository",
        "operationId": "repoEditHook",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the hook",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditHookOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Hook"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{id}/tests": {
      "post": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Test a push webhook",
        "operationId": "repoTestHook",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the hook to test",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "List a repository's issues",
        "operationId": "issueListIssues",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "whether issue is open or closed",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page number of requested issues",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "search string",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IssueList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Create an issue. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "issueCreateIssue",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateIssueOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Issue"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "List all comments in a repository",
        "operationId": "issueGetRepoComments",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "if provided, only comments updated since the provided time are returned.",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommentList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{id}": {
      "delete": {
        "tags": ["issue"],
        "summary": "Delete a comment",
        "operationId": "issueDeleteComment",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of comment to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Edit a comment",
        "operationId": "issueEditComment",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the comment to edit",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditIssueCommentOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comment"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{id}/assets": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "List comment's attachments",
        "operationId": "issueGetCommentAttachments",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the comment",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AttachmentList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{id}/times": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "List an issue's tracked times",
        "operationId": "issueTrackedTimes",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TrackedTimeList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Add a tracked time to a issue",
        "operationId": "issueAddTime",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue to add tracked time to",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddTimeOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TrackedTime"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "403": {
            "$ref": "#/responses/error"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{id}/times/stopwatch": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get the stopwatch of the authenticated user for an issue",
        "operationId": "issueGetMyStopwatch",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue to get the stopwatch for",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Stopwatch"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "403": {
            "$ref": "#/responses/error"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{id}/times/stopwatch/cancel": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Cancel the stopwatch for an issue",
        "operationId": "issueCancelStopwatch",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue to cancel the stopwatch for",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "403": {
            "$ref": "#/responses/error"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{id}/times/stopwatch/toggle": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Create or stop a stopwatch for an issue",
        "operationId": "issueToggleStopwatch",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue to toggle the stopwatch for",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "403": {
            "$ref": "#/responses/error"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get an issue",
        "operationId": "issueGetIssue",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue to get",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Issue"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "issueEditIssue",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue to edit",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditIssueOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Issue"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/assets": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "List issue's attachments",
        "operationId": "issueGetAttachments",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AttachmentList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/comments": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "List all comments on an issue",
        "operationId": "issueGetComments",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "if provided, only comments updated since the specified time are returned.",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "description": "type of comment to search for. Supported values are \"comment\", \"event\", \"all\". Default is \"comment\"",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommentList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Add a comment to an issue",
        "operationId": "issueCreateComment",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateIssueCommentOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comment"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/comments/{id}": {
      "delete": {
        "tags": ["issue"],
        "summary": "Delete a comment",
        "operationId": "issueDeleteCommentDeprecated",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "this parameter is ignored",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of comment to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Edit a comment",
        "operationId": "issueEditCommentDeprecated",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "this parameter is ignored",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the comment to edit",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditIssueCommentOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comment"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/deadline": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "issueEditIssueDeadline",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue to create or update a deadline on",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditDeadlineOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IssueDeadline"
          },
          "403": {
            "description": "Not repo writer"
          },
          "404": {
            "description": "Issue not found"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/labels": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get an issue's labels",
        "operationId": "issueGetLabels",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LabelList"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Replace an issue's labels",
        "operationId": "issueReplaceLabels",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IssueLabelsOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LabelList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Add a label to an issue",
        "operationId": "issueAddLabel",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IssueLabelsOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LabelList"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Remove all labels from an issue",
        "operationId": "issueClearLabels",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/labels/{id}": {
      "delete": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Remove a label from an issue",
        "operationId": "issueRemoveLabel",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the label to remove",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/participants": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get participants of an issue",
        "operationId": "issueGetParticipants",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{index}/progress": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get the progress of the current user in solving an issue",
        "operationId": "issueGetProgress",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IssueSolutionProgress"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Create the progress of the current user in solving an issue",
        "operationId": "issueCreateProgress",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IssueSolutionProgress"
          },
          "200": {
            "$ref": "#/responses/IssueSolutionProgress"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "patch": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Update the progress of the current user in solving an issue",
        "operationId": "issueUpdateProgress",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the issue",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProgressOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IssueSolutionProgress"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/keys": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repository's keys",
        "operationId": "repoListKeys",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the key_id to search for",
            "name": "key_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "fingerprint of the key",
            "name": "fingerprint",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeployKeyList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Add a key to a repository",
        "operationId": "repoCreateKey",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateKeyOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeployKey"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/keys/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a repository's key by id",
        "operationId": "repoGetKey",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the key to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeployKey"
          }
        }
      },
      "delete": {
        "tags": ["repository"],
        "summary": "Delete a key from a repository",
        "operationId": "repoDeleteKey",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the key to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/labels": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get all of a repository's labels",
        "operationId": "issueListLabels",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LabelList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Create a label",
        "operationId": "issueCreateLabel",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateLabelOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Label"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/labels/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get a single label",
        "operationId": "issueGetLabel",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the label to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Label"
          }
        }
      },
      "delete": {
        "tags": ["issue"],
        "summary": "Delete a label",
        "operationId": "issueDeleteLabel",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the label to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Update a label",
        "operationId": "issueEditLabel",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the label to edit",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditLabelOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Label"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/milestones": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get all of a repository's opened milestones",
        "operationId": "issueGetMilestonesList",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MilestoneList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Create a milestone",
        "operationId": "issueCreateMilestone",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMilestoneOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Milestone"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/milestones/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Get a milestone",
        "operationId": "issueGetMilestone",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the milestone",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Milestone"
          }
        }
      },
      "delete": {
        "tags": ["issue"],
        "summary": "Delete a milestone",
        "operationId": "issueDeleteMilestone",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the milestone to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["issue"],
        "summary": "Update a milestone",
        "operationId": "issueEditMilestone",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the milestone",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditMilestoneOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Milestone"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/mirror-sync": {
      "post": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Sync a mirrored repository",
        "operationId": "repoMirrorSync",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo to sync",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo to sync",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repo's pull requests",
        "operationId": "repoListPullRequests",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "enum": ["closed", "open", "all"],
            "type": "string",
            "description": "State of pull request: open or closed (optional)",
            "name": "state",
            "in": "query"
          },
          {
            "enum": [
              "oldest",
              "recentupdate",
              "leastupdate",
              "mostcomment",
              "leastcomment",
              "priority"
            ],
            "type": "string",
            "description": "Type of sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the milestone",
            "name": "milestone",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "description": "Label IDs",
            "name": "labels",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PullRequestList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Create a pull request",
        "operationId": "repoCreatePullRequest",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePullRequestOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PullRequest"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a pull request",
        "operationId": "repoGetPullRequest",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request to get",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PullRequest"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Update a pull request",
        "operationId": "repoEditPullRequest",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request to edit",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditPullRequestOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PullRequest"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/charge": {
      "post": {
        "produces": ["application/json"],
        "tags": ["repo"],
        "summary": "Create charge for the bounty solution",
        "operationId": "repoCreatePullRequestCharge",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Charge"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/merge": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Check if a pull request has been merged",
        "operationId": "repoPullRequestIsMerged",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "pull request has been merged"
          },
          "404": {
            "description": "pull request has not been merged"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Merge a pull request",
        "operationId": "repoMergePullRequest",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request to merge",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "405": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/payment_details": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repo"],
        "summary": "Get payment details of the bounty targeted by a PR",
        "operationId": "repoGetPullRequestPaymentDetails",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PaymentDetails"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "produces": ["application/json"],
        "tags": ["repo"],
        "summary": "Set payment details for the bounty targeted by a PR",
        "operationId": "repoPutPullRequestPaymentDetails",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request",
            "name": "index",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PaymentDetails"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{index}/target_issue/{target}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["repo"],
        "summary": "Set target issue for the PR",
        "operationId": "repoPullRequestSetTargetIssue",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the pull request",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "index of the target issue",
            "name": "target",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/raw/{filepath}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a file from a repository",
        "operationId": "repoGetRawFile",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "filepath of the file to get",
            "name": "filepath",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repo's releases",
        "operationId": "repoListReleases",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReleaseList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Create a release",
        "operationId": "repoCreateRelease",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateReleaseOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Release"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a release",
        "operationId": "repoGetRelease",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Release"
          }
        }
      },
      "delete": {
        "tags": ["repository"],
        "summary": "Delete a release",
        "operationId": "repoDeleteRelease",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Update a release",
        "operationId": "repoEditRelease",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release to edit",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditReleaseOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Release"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{id}/assets": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List release's attachments",
        "operationId": "repoListReleaseAttachments",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AttachmentList"
          }
        }
      },
      "post": {
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Create a release attachment",
        "operationId": "repoCreateReleaseAttachment",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the attachment",
            "name": "name",
            "in": "query"
          },
          {
            "type": "file",
            "description": "attachment to upload",
            "name": "attachment",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Attachment"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a release attachment",
        "operationId": "repoGetReleaseAttachment",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the attachment to get",
            "name": "attachment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Attachment"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Delete a release attachment",
        "operationId": "repoDeleteReleaseAttachment",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the attachment to delete",
            "name": "attachment_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Edit a release attachment",
        "operationId": "repoEditReleaseAttachment",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the release",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the attachment to edit",
            "name": "attachment_id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditAttachmentOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Attachment"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/stargazers": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repo's stargazers",
        "operationId": "repoListStargazers",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/statuses/{sha}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a commit's statuses",
        "operationId": "repoListStatuses",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "sha of the commit",
            "name": "sha",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StatusList"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Create a commit status",
        "operationId": "repoCreateStatus",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "sha of the commit",
            "name": "sha",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateStatusOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StatusList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/subscribers": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repo's watchers",
        "operationId": "repoListSubscribers",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/subscription": {
      "get": {
        "tags": ["repository"],
        "summary": "Check if the current user is watching a repo",
        "operationId": "userCurrentCheckSubscription",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WatchInfo"
          }
        }
      },
      "put": {
        "tags": ["repository"],
        "summary": "Watch a repo",
        "operationId": "userCurrentPutSubscription",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WatchInfo"
          }
        }
      },
      "delete": {
        "tags": ["repository"],
        "summary": "Unwatch a repo",
        "operationId": "userCurrentDeleteSubscription",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/times": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "List a repo's tracked times",
        "operationId": "repoTrackedTimes",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TrackedTimeList"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/times/{user}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List a user's tracked times in a repo",
        "operationId": "userTrackedTimes",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TrackedTimeList"
          }
        }
      }
    },
    "/repositories/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "Get a repository by id",
        "operationId": "repoGetByID",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the repo to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          }
        }
      }
    },
    "/requests": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "Create a request",
        "operationId": "requestsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateRequestOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Request"
          }
        }
      }
    },
    "/startups": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "Pre-signup a startup to Algora",
        "operationId": "presignupStartup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StartupPreSignupOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/students": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "Pre-signup a student to Algora",
        "operationId": "presignupStudent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StudentPreSignupOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/subscribe": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["text/html"],
        "tags": ["miscellaneous"],
        "summary": "Subscribe to Algora newsletter",
        "operationId": "subscribe",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscribeOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Subscriber"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Get a team",
        "operationId": "orgGetTeam",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Team"
          }
        }
      },
      "delete": {
        "tags": ["organization"],
        "summary": "Delete a team",
        "operationId": "orgDeleteTeam",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "team deleted"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Edit a team",
        "operationId": "orgEditTeam",
        "parameters": [
          {
            "type": "integer",
            "description": "id of the team to edit",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditTeamOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Team"
          }
        }
      }
    },
    "/teams/{id}/members": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List a team's members",
        "operationId": "orgListTeamMembersByID",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/teams/{id}/members/{username}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Add a team member",
        "operationId": "orgAddTeamMember",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user to add",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Remove a team member",
        "operationId": "orgRemoveTeamMember",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of the user to remove",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/teams/{id}/repos": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List a team's repos",
        "operationId": "orgListTeamRepos",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      }
    },
    "/teams/{id}/repos/{org}/{repo}": {
      "put": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Add a repository to a team",
        "operationId": "orgAddTeamRepository",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "organization that owns the repo to add",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo to add",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "delete": {
        "description": "This does not delete the repository, it only removes the repository from the team.",
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "Remove a repository from a team",
        "operationId": "orgRemoveTeamRepository",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of the team",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "organization that owns the repo to remove",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo to remove",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/topics/search": {
      "get": {
        "produces": ["application/json"],
        "tags": ["repository"],
        "summary": "search topics via keyword",
        "operationId": "topicSearch",
        "parameters": [
          {
            "type": "string",
            "description": "keywords to search",
            "name": "q",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          }
        }
      }
    },
    "/unsubscription": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "Unsubscribe from Algora emails",
        "operationId": "unsubscribe",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UnsubscribeOption"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/unsubscription/{code}": {
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "Edit unsubscription",
        "operationId": "editUnsubscription",
        "parameters": [
          {
            "type": "string",
            "description": "code of the unsubscription to edit",
            "name": "code",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditUnsubscriptionOption"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get the authenticated user",
        "operationId": "userGetCurrent",
        "responses": {
          "200": {
            "$ref": "#/responses/ExtendedUser"
          }
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Edit the authenticated user",
        "operationId": "userEditCurrent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EditUserOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ExtendedUser"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/avatar": {
      "patch": {
        "consumes": ["application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Edit a user's avatar",
        "operationId": "userEditCurrentAvatar",
        "parameters": [
          {
            "type": "string",
            "format": "binary",
            "description": "new avatar",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/bank_accounts/list": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get the authenticated user's bank accounts",
        "operationId": "userCurrentGetBankAccounts",
        "responses": {
          "200": {
            "$ref": "#/responses/BankAccountList"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/bank_accounts/{id}": {
      "delete": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Delete a bank account of the authenticated user",
        "operationId": "userCurrentDeleteBankAccount",
        "parameters": [
          {
            "type": "string",
            "description": "id of the bank account to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/user/bounties": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the bounties that the authenticated user owns",
        "operationId": "userCurrentListBounties",
        "parameters": [
          {
            "type": "string",
            "description": "whether bounty is open or closed",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page number of requested bounties",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BountyList"
          }
        }
      }
    },
    "/user/customer_id": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get the authenticated user's customer id",
        "operationId": "userCurrentGetCustomerID",
        "responses": {
          "200": {
            "schema": {
              "description": "Unique identifier for the Customer.",
              "type": "string"
            }
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Create a customer id",
        "operationId": "userCurrentPostCustomerID",
        "responses": {
          "200": {
            "schema": {
              "description": "Unique identifier for the Customer.",
              "type": "string"
            }
          },
          "200": {
            "schema": {
              "description": "Unique identifier for the Customer.",
              "type": "string"
            }
          }
        }
      }
    },
    "/user/documents": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List documents of authenticated user",
        "operationId": "userListDocuments",
        "responses": {
          "200": {
            "$ref": "#/responses/DocumentList"
          }
        }
      }
    },
    "/user/emails": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the authenticated user's email addresses",
        "operationId": "userListEmails",
        "responses": {
          "200": {
            "$ref": "#/responses/EmailAddressList"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Add email addresses",
        "operationId": "userAddEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateEmailAddressOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmailAddressList"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Delete email addresses",
        "operationId": "userDeleteEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteEmailAddressOption"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/user/followers": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the authenticated user's followers",
        "operationId": "userCurrentListFollowers",
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/user/following": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the users that the authenticated user is following",
        "operationId": "userCurrentListFollowing",
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/user/following/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Check whether a user is followed by the authenticated user",
        "operationId": "userCurrentCheckFollowing",
        "parameters": [
          {
            "type": "string",
            "description": "username of followed user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Follow a user",
        "operationId": "userCurrentPutFollow",
        "parameters": [
          {
            "type": "string",
            "description": "username of user to follow",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Unfollow a user",
        "operationId": "userCurrentDeleteFollow",
        "parameters": [
          {
            "type": "string",
            "description": "username of user to unfollow",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/user/gpg_keys": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the authenticated user's GPG keys",
        "operationId": "userCurrentListGPGKeys",
        "responses": {
          "200": {
            "$ref": "#/responses/GPGKeyList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Create a GPG key",
        "operationId": "userCurrentPostGPGKey",
        "parameters": [
          {
            "name": "Form",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateGPGKeyOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GPGKey"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/gpg_keys/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get a GPG key",
        "operationId": "userCurrentGetGPGKey",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of key to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GPGKey"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Remove a GPG key",
        "operationId": "userCurrentDeleteGPGKey",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of key to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          }
        }
      }
    },
    "/user/job_postings": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List the job postings of the authenticated user",
        "operationId": "orgListCurrentUserJobPostings",
        "responses": {
          "200": {
            "$ref": "#/responses/JobPostingList"
          }
        }
      }
    },
    "/user/job_postings/hired": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the positions that the authenticated user is hired for",
        "operationId": "userListJobsHired",
        "responses": {
          "200": {
            "$ref": "#/responses/JobPostingList"
          }
        }
      }
    },
    "/user/job_postings/hiring": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the positions that the authenticated user is hiring for",
        "operationId": "userListJobsHiring",
        "responses": {
          "200": {
            "$ref": "#/responses/JobPostingList"
          }
        }
      }
    },
    "/user/keys": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the authenticated user's public keys",
        "operationId": "userCurrentListKeys",
        "parameters": [
          {
            "type": "string",
            "description": "fingerprint of the key",
            "name": "fingerprint",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublicKeyList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Create a public key",
        "operationId": "userCurrentPostKey",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateKeyOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublicKey"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/keys/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get a public key",
        "operationId": "userCurrentGetKey",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of key to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublicKey"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Delete a public key",
        "operationId": "userCurrentDeleteKey",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "id of key to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/user/link_account": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Link a bank account",
        "operationId": "userCurrentLinkAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LinkAccountOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BankAccount"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/user/notifications": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the notifications belonging to the authenticated user",
        "operationId": "userCurrentListNotifications",
        "parameters": [
          {
            "enum": ["unread", "read", "all"],
            "type": "string",
            "description": "Status of notifications to search for. Default is \"unread\". Pinned notifications are always included.",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NotificationList"
          }
        }
      }
    },
    "/user/oauth/stripe/state": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get OAuth state for Stripe Connect",
        "operationId": "userCurrentGetStripeConnectOAuthState",
        "responses": {
          "200": {
            "description": "OAuth state",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user/onboarding/profile": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Complete user onboarding for solving bounties",
        "operationId": "userCompleteOnboardingProfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserOnboardingProfileOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ExtendedUser"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/onboarding_progress": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get the onboarding progress of the current user",
        "operationId": "userCurrentGetOnboardingProgress",
        "responses": {
          "200": {
            "$ref": "#/responses/OnboardingProgress"
          }
        }
      }
    },
    "/user/orgs": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List the current user's organizations",
        "operationId": "orgListCurrentUserOrgs",
        "responses": {
          "200": {
            "$ref": "#/responses/OrganizationList"
          }
        }
      }
    },
    "/user/password": {
      "put": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Set password using a code",
        "operationId": "userSetPassword",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SetPasswordOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Create a new password with a password reset code sent to the given email",
        "operationId": "userCreatePassword",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePasswordOption"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/payment_methods/list/{type}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get the authenticated user's payment methods of the given type",
        "operationId": "userCurrentGetPaymentMethods",
        "parameters": [
          {
            "type": "string",
            "description": "type of payment method. Supported values are \"card\", \"fpx\", \"ideal\" and \"sepa_debit\"",
            "name": "type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CardPaymentMethodList"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/payment_methods/{id}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get a payment method of the authenticated user",
        "operationId": "userCurrentGetPaymentMethod",
        "parameters": [
          {
            "type": "string",
            "description": "id of the payment method to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CardPaymentMethod"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Delete a payment method of the authenticated user",
        "operationId": "userCurrentDeletePaymentMethod",
        "parameters": [
          {
            "type": "string",
            "description": "id of the payment method to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/user/payments": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List personal and organizational payments of the authenticated user",
        "operationId": "userCurrentListPayments",
        "parameters": [
          {
            "type": "integer",
            "description": "page number of requested payments",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PaymentList"
          }
        }
      }
    },
    "/user/reg_tokens": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Add a registration token",
        "operationId": "userAddRegToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateRegTokenOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RegToken"
          },
          "200": {
            "$ref": "#/responses/RegToken"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/repos": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the repos that the authenticated user owns or has access to",
        "operationId": "userCurrentListRepos",
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["repository", "user"],
        "summary": "Create a repository",
        "operationId": "createCurrentUserRepo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateRepoOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Repository"
          }
        }
      }
    },
    "/user/resume": {
      "put": {
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Add a resume",
        "operationId": "userAddResume",
        "parameters": [
          {
            "type": "file",
            "description": "resume to upload",
            "name": "resume",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ExtendedUser"
          },
          "400": {
            "$ref": "#/responses/error"
          },
          "404": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/user/session": {
      "post": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Create a new user session",
        "operationId": "userCreateNewSession",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSessionOption"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "description": "Redirection URL",
              "type": "string"
            }
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/setup_intent": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Create a SetupIntent",
        "operationId": "userCurrentPostSetupIntent",
        "responses": {
          "200": {
            "schema": {
              "description": "The client secret of the created SetupIntent.",
              "type": "string"
            }
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/user/signup": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Sign up",
        "operationId": "userSignup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserOption"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "auth_url": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/signup/founder": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Sign up as a founder",
        "operationId": "userSignupFounder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateFounderOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Organization"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/signup/invitation/{token}": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Sign up with an invitation token",
        "operationId": "userSignupWithInvitation",
        "parameters": [
          {
            "type": "string",
            "description": "invitation token",
            "name": "token",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/signup/seeded": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Sign up a seeded user",
        "operationId": "userSignupSeededUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSeededUserOption"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "auth_url": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/signup/student": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Sign up as a student",
        "operationId": "userSignupStudent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateStudentOption"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ExtendedUser"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/user/starred": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "The repos that the authenticated user has starred",
        "operationId": "userCurrentListStarred",
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      }
    },
    "/user/starred/{owner}/{repo}": {
      "get": {
        "tags": ["user"],
        "summary": "Whether the authenticated is starring the repo",
        "operationId": "userCurrentCheckStarring",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Star the given repo",
        "operationId": "userCurrentPutStar",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo to star",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo to star",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Unstar the given repo",
        "operationId": "userCurrentDeleteStar",
        "parameters": [
          {
            "type": "string",
            "description": "owner of the repo to unstar",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the repo to unstar",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/user/stats": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get a collection of statistics for the authenticated user",
        "operationId": "userCurrentGetStats",
        "responses": {
          "200": {
            "$ref": "#/responses/UserStats"
          }
        }
      }
    },
    "/user/subscriptions": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List repositories watched by the authenticated user",
        "operationId": "userCurrentListSubscriptions",
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      }
    },
    "/user/times": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the current user's tracked times",
        "operationId": "userCurrentTrackedTimes",
        "responses": {
          "200": {
            "$ref": "#/responses/TrackedTimeList"
          }
        }
      }
    },
    "/user/workspace/{id}": {
      "put": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Set the current workspace of the authenticated user",
        "operationId": "userSetWorkspace",
        "responses": {
          "200": {
            "$ref": "#/responses/ExtendedUser"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List users",
        "operationId": "userList",
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Search for users",
        "operationId": "userSearch",
        "parameters": [
          {
            "type": "string",
            "description": "keyword",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the user to search for",
            "name": "uid",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "maximum number of users to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "unclaimed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResults of a successful search",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "ok": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/users/{follower}/following/{followee}": {
      "get": {
        "tags": ["user"],
        "summary": "Check if one user is following another user",
        "operationId": "userCheckFollowing",
        "parameters": [
          {
            "type": "string",
            "description": "username of following user",
            "name": "follower",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username of followed user",
            "name": "followee",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get a user",
        "operationId": "userGet",
        "parameters": [
          {
            "type": "string",
            "description": "username of user to get",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/users/{username}/collabs": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List a user's collaborations",
        "operationId": "userListCollabs",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OrganizationList"
          }
        }
      }
    },
    "/users/{username}/followers": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the given user's followers",
        "operationId": "userListFollowers",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/users/{username}/following": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the users that the given user is following",
        "operationId": "userListFollowing",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserList"
          }
        }
      }
    },
    "/users/{username}/gpg_keys": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the given user's GPG keys",
        "operationId": "userListGPGKeys",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GPGKeyList"
          }
        }
      }
    },
    "/users/{username}/heatmap": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Get a user's heatmap",
        "operationId": "userGetHeatmapData",
        "parameters": [
          {
            "type": "string",
            "description": "username of user to get",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserHeatmapData"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/users/{username}/keys": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the given user's public keys",
        "operationId": "userListKeys",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "fingerprint of the key",
            "name": "fingerprint",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublicKeyList"
          }
        }
      }
    },
    "/users/{username}/orgs": {
      "get": {
        "produces": ["application/json"],
        "tags": ["organization"],
        "summary": "List a user's organizations",
        "operationId": "orgListUserOrgs",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OrganizationList"
          }
        }
      }
    },
    "/users/{username}/repos": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the repos owned by the given user",
        "operationId": "userListRepos",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      }
    },
    "/users/{username}/starred": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "The repos that the given user has starred",
        "operationId": "userListStarred",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      }
    },
    "/users/{username}/subscriptions": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the repositories watched by a user",
        "operationId": "userListSubscriptions",
        "parameters": [
          {
            "type": "string",
            "description": "username of the user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RepositoryList"
          }
        }
      }
    },
    "/users/{username}/tokens": {
      "get": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "List the authenticated user's access tokens",
        "operationId": "userGetTokens",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccessTokenList"
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "Create an access token",
        "operationId": "userCreateToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "accessToken",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["name"],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccessToken"
          }
        }
      }
    },
    "/users/{username}/tokens/{token}": {
      "delete": {
        "produces": ["application/json"],
        "tags": ["user"],
        "summary": "delete an access token",
        "operationId": "userDeleteAccessToken",
        "parameters": [
          {
            "type": "string",
            "description": "username of user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "token to be deleted",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/empty"
          }
        }
      }
    },
    "/version": {
      "get": {
        "produces": ["application/json"],
        "tags": ["miscellaneous"],
        "summary": "Returns the version of the Gitea application",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/ServerVersion"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessToken": {
      "type": "object",
      "title": "AccessToken represents a API access token.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "sha1": {
          "type": "string",
          "x-go-name": "Sha1"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AddCollaboratorOption": {
      "description": "AddCollaboratorOption options when adding a user as a collaborator of a repository",
      "type": "object",
      "properties": {
        "permission": {
          "type": "string",
          "enum": ["read", "write", "admin"],
          "x-go-name": "Permission"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AddEducationOption": {
      "description": "AddEducationOption add education options",
      "type": "object",
      "required": ["institution", "degree", "fields"],
      "properties": {
        "activities": {
          "type": "string",
          "x-go-name": "Activities"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "grade": {
          "type": "number",
          "format": "float",
          "x-go-name": "Grade"
        },
        "graduated": {
          "type": "boolean",
          "x-go-name": "Graduated"
        },
        "graduation_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GraduationYear"
        },
        "institution": {
          "type": "string",
          "x-go-name": "Institution"
        },
        "study_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StudyYear"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AddExperienceOption": {
      "description": "AddExperienceOption add experience options",
      "type": "object",
      "required": ["organization", "title"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "end_date": {
          "type": "string",
          "x-go-name": "EndDate"
        },
        "is_current_job": {
          "type": "boolean",
          "x-go-name": "IsCurrentJob"
        },
        "is_primary": {
          "type": "boolean",
          "x-go-name": "IsPrimary"
        },
        "organization": {
          "type": "string",
          "x-go-name": "Organization"
        },
        "start_date": {
          "type": "string",
          "x-go-name": "StartDate"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AddJobCandidatesOption": {
      "description": "AddJobCandidatesOption options for adding candidates to a job posting",
      "type": "object",
      "required": ["emails"],
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Emails"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AddProjectContributorOption": {
      "type": "object",
      "required": ["reward"],
      "properties": {
        "reward": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reward"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AddTimeOption": {
      "description": "AddTimeOption options for adding time to an issue",
      "type": "object",
      "required": ["time"],
      "properties": {
        "time": {
          "description": "time in seconds",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Time"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AdminCreateUserOption": {
      "description": "AdminCreateUserOption create user options",
      "type": "object",
      "required": ["username", "email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "kind": {
          "type": "string",
          "enum": ["founder", "student"],
          "x-go-name": "Kind"
        },
        "login_name": {
          "type": "string",
          "x-go-name": "LoginName"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "send_notify": {
          "type": "boolean",
          "x-go-name": "SendNotify"
        },
        "source_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SourceID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AdminEditUserOption": {
      "description": "AdminEditUserOption edit user options",
      "type": "object",
      "required": ["email"],
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "allow_create_organization": {
          "type": "boolean",
          "x-go-name": "AllowCreateOrganization"
        },
        "allow_git_hook": {
          "type": "boolean",
          "x-go-name": "AllowGitHook"
        },
        "allow_import_local": {
          "type": "boolean",
          "x-go-name": "AllowImportLocal"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "login_name": {
          "type": "string",
          "x-go-name": "LoginName"
        },
        "max_repo_creation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxRepoCreation"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "prohibit_login": {
          "type": "boolean",
          "x-go-name": "ProhibitLogin"
        },
        "source_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SourceID"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AdminPreUserStartup": {
      "description": "AdminPreUserStartup represents a startup who has requested access on Algora",
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "tech",
        "role",
        "startup_name",
        "startup_url"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "startup_name": {
          "type": "string",
          "x-go-name": "StartupName"
        },
        "startup_url": {
          "type": "string",
          "x-go-name": "StartupURL"
        },
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "tel": {
          "type": "string",
          "x-go-name": "Tel"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "AdminPreUserStudent": {
      "description": "AdminPreUserStudent represents a student who has requested access on Algora",
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "experience",
        "school",
        "degree",
        "grad_year",
        "major"
      ],
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "experience": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "github": {
          "type": "string",
          "x-go-name": "Github"
        },
        "grad_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GradYear"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "major": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Major"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resume_url": {
          "description": "URL to the student's resume",
          "type": "string",
          "x-go-name": "ResumeURL"
        },
        "school": {
          "type": "string",
          "x-go-name": "School"
        },
        "tel": {
          "type": "string",
          "x-go-name": "Tel"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ApplyToJobOption": {
      "type": "object",
      "required": ["full_name", "tech_stack"],
      "properties": {
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "github": {
          "type": "string",
          "x-go-name": "Github"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Attachment": {
      "description": "Attachment a generic attachment",
      "type": "object",
      "required": [
        "id",
        "name",
        "size",
        "download_count",
        "created_at",
        "uuid",
        "browser_download_url"
      ],
      "properties": {
        "browser_download_url": {
          "type": "string",
          "x-go-name": "DownloadURL"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "download_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DownloadCount"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "BankAccount": {
      "description": "BankAccount represents a bank account",
      "type": "object",
      "required": ["object", "id", "currency", "bank_name", "last4", "status"],
      "properties": {
        "bank_name": {
          "type": "string",
          "x-go-name": "BankName"
        },
        "currency": {
          "type": "string",
          "x-go-name": "Currency"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "last4": {
          "type": "string",
          "x-go-name": "Last4"
        },
        "object": {
          "type": "string",
          "enum": ["bank_account"],
          "x-go-name": "Object"
        },
        "status": {
          "type": "string",
          "enum": [
            "new",
            "validated",
            "verified",
            "verification_failed",
            "errored"
          ],
          "x-go-name": "Status"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Bounty": {
      "description": "Bounty represents a bounty in a repository",
      "type": "object",
      "required": [
        "id",
        "url",
        "number",
        "user",
        "title",
        "body",
        "labels",
        "assignees",
        "candidates",
        "repo",
        "state",
        "comments",
        "issue_id",
        "reward",
        "created_at"
      ],
      "properties": {
        "assignee": {
          "$ref": "#/definitions/User"
        },
        "assignees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Assignees"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Candidates"
        },
        "comments": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Comments"
        },
        "cover_photo_url": {
          "type": "string",
          "x-go-name": "CoverPhotoURL"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "issue_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssueID"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Index"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "reward": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "state": {
          "type": "string",
          "enum": ["open", "closed"],
          "x-go-name": "State"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "BountyCandidate": {
      "description": "BountyCandidate represents a candidate for a bounty",
      "type": "object",
      "required": ["id", "email", "status", "created_at"],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "status": {
          "type": "string",
          "enum": ["invited", "accepted", "applied"],
          "x-go-name": "Status"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "BountyMeta": {
      "description": "BountyMeta bounty info if an issue is a bounty",
      "type": "object",
      "required": ["reward"],
      "properties": {
        "reward": {
          "$ref": "#/definitions/PaymentAmount"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "BountySolutionProgress": {
      "description": "BountySolutionProgress represents the progress of a user in solving a bounty",
      "type": "object",
      "required": ["cloned", "pushed", "set_up_account", "created_at"],
      "properties": {
        "cloned": {
          "type": "boolean",
          "x-go-name": "HasCloned"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "fork": {
          "$ref": "#/definitions/Repository"
        },
        "pull_request": {
          "$ref": "#/definitions/PullRequest"
        },
        "pushed": {
          "type": "boolean",
          "x-go-name": "HasPushed"
        },
        "set_up_account": {
          "type": "boolean",
          "x-go-name": "HasSetUpAccount"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Branch": {
      "description": "Branch represents a repository branch",
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/PayloadCommit"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Business": {
      "description": "Business represents a business",
      "type": "object",
      "required": ["id", "type", "tech_stack", "address"],
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "legal_name": {
          "type": "string",
          "x-go-name": "LegalName"
        },
        "state_of_incorporation": {
          "type": "string",
          "x-go-name": "StateOfInc"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "TechStack"
        },
        "type": {
          "type": "string",
          "enum": ["company", "individual"],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Card": {
      "type": "object",
      "required": ["last4", "exp_month", "exp_year", "brand"],
      "properties": {
        "brand": {
          "type": "string",
          "enum": [
            "amex",
            "diners",
            "discover",
            "jcb",
            "mastercard",
            "unionpay",
            "visa",
            "unknown"
          ],
          "x-go-name": "Brand"
        },
        "exp_month": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpMonth"
        },
        "exp_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpYear"
        },
        "last4": {
          "type": "string",
          "x-go-name": "Last4"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CardPaymentMethod": {
      "description": "CardPaymentMethod represents a card payment method",
      "type": "object",
      "required": ["object", "type", "id", "card"],
      "properties": {
        "card": {
          "$ref": "#/definitions/Card"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "object": {
          "type": "string",
          "enum": ["payment_method"],
          "x-go-name": "Object"
        },
        "type": {
          "type": "string",
          "enum": ["card"],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Charge": {
      "description": "Charge represents a charge",
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string",
          "enum": ["pending", "succeeded", "failed"],
          "x-go-name": "Status"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ClaimProfileOption": {
      "description": "ClaimProfileOption claim account options",
      "type": "object",
      "required": ["username", "email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Comment": {
      "description": "Comment represents a comment on a commit or issue",
      "type": "object",
      "required": [
        "id",
        "type",
        "html_url",
        "pull_request_url",
        "issue_url",
        "user",
        "body",
        "removed_assignee",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "assignee": {
          "$ref": "#/definitions/User"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "commit_sha": {
          "type": "string",
          "x-go-name": "CommitSHA"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "dependent_issue": {
          "$ref": "#/definitions/Issue"
        },
        "html_url": {
          "type": "string",
          "x-go-name": "HTMLURL"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "issue_url": {
          "type": "string",
          "x-go-name": "IssueURL"
        },
        "label": {
          "$ref": "#/definitions/Label"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "new_title": {
          "type": "string",
          "x-go-name": "NewTitle"
        },
        "old_milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "old_title": {
          "type": "string",
          "x-go-name": "OldTitle"
        },
        "pull_request_url": {
          "type": "string",
          "x-go-name": "PRURL"
        },
        "removed_assignee": {
          "type": "boolean",
          "x-go-name": "RemovedAssignee"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Contract": {
      "type": "object",
      "title": "Contract represents a job offer by an organization.",
      "required": [
        "id",
        "organization",
        "poster",
        "employee",
        "expected_hours",
        "amount",
        "created_at",
        "starting_at",
        "ending_at"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "employee": {
          "$ref": "#/definitions/User"
        },
        "ending_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "End"
        },
        "expected_hours": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpectedHours"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "organization": {
          "$ref": "#/definitions/User"
        },
        "poster": {
          "$ref": "#/definitions/User"
        },
        "starting_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Start"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateBountyOption": {
      "description": "CreateBountyOption options to create bounty",
      "type": "object",
      "required": ["reward"],
      "properties": {
        "reward": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reward"
        },
        "visibility_emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VisibilityEmails"
        },
        "visibility_unis": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VisibilityUnis"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateBusinessOption": {
      "description": "CreateBusinessOption options for creating a business",
      "type": "object",
      "required": ["type", "tech_stack", "address"],
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "legal_name": {
          "type": "string",
          "x-go-name": "LegalName"
        },
        "org_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OrgID"
        },
        "state_of_incorporation": {
          "type": "string",
          "x-go-name": "StateOfInc"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "TechStack"
        },
        "type": {
          "type": "string",
          "enum": ["company", "individual"],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateContractOption": {
      "description": "CreateContractOption options for creating a contract",
      "type": "object",
      "required": [
        "amount",
        "expected_hours",
        "start_date",
        "payment_type",
        "payment_source_id"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Amount"
        },
        "expected_hours": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpectedHours"
        },
        "payment_source_id": {
          "type": "string",
          "x-go-name": "PaymentSourceID"
        },
        "payment_type": {
          "$ref": "#/definitions/PaymentType"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateEmailAddressOption": {
      "description": "CreateEmailAddressOption options when creating email addresses",
      "type": "object",
      "properties": {
        "emails": {
          "description": "email addresses to add",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Emails"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateEmailOption": {
      "description": "CreateEmailOption options when creating emails",
      "type": "object",
      "required": ["from", "to", "template", "subject"],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Data"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "identifier": {
          "type": "string",
          "x-go-name": "Identifier"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "to": {
          "type": "string",
          "format": "email",
          "x-go-name": "To"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateEntityOption": {
      "description": "CreateEntityOption options for creating entity",
      "type": "object",
      "required": ["name", "type"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "linked_in_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LinkedInID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "$ref": "#/definitions/EntityType"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateForkOption": {
      "description": "CreateForkOption options for creating a fork",
      "type": "object",
      "properties": {
        "organization": {
          "description": "organization name, if forking into an organization",
          "type": "string",
          "x-go-name": "Organization"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateFounderOption": {
      "description": "CreateFounderOption create founder options",
      "type": "object",
      "required": [
        "username",
        "email",
        "password",
        "role",
        "org_name",
        "org_full_name",
        "org_url"
      ],
      "properties": {
        "alma_mater": {
          "type": "string",
          "x-go-name": "AlmaMater"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "is_student_founder": {
          "type": "boolean",
          "x-go-name": "IsStudentFounder"
        },
        "job_tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "JobTech"
        },
        "job_title": {
          "type": "string",
          "x-go-name": "JobTitle"
        },
        "org_full_name": {
          "type": "string",
          "x-go-name": "OrgFullName"
        },
        "org_name": {
          "type": "string",
          "x-go-name": "OrgName"
        },
        "org_url": {
          "type": "string",
          "x-go-name": "OrgURL"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateGPGKeyOption": {
      "description": "CreateGPGKeyOption options create user GPG key",
      "type": "object",
      "required": ["armored_public_key"],
      "properties": {
        "armored_public_key": {
          "description": "An armored GPG key to add",
          "type": "string",
          "uniqueItems": true,
          "x-go-name": "ArmoredKey"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateHookOption": {
      "description": "CreateHookOption options when create a hook",
      "type": "object",
      "required": ["type", "config"],
      "properties": {
        "active": {
          "type": "boolean",
          "default": false,
          "x-go-name": "Active"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Config"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Events"
        },
        "type": {
          "type": "string",
          "enum": ["gitea", "gogs", "slack", "discord"],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateInstOption": {
      "description": "CreateInstOption options for creating an institution",
      "type": "object",
      "required": ["username"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateInterviewOption": {
      "description": "CreateInterviewOption options for creating an interview",
      "type": "object",
      "required": ["title"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateIssueCommentOption": {
      "description": "CreateIssueCommentOption options for creating a comment on an issue",
      "type": "object",
      "required": ["body"],
      "properties": {
        "body": {
          "type": "string",
          "x-go-name": "Body"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateIssueOption": {
      "description": "CreateIssueOption options to create one issue",
      "type": "object",
      "required": ["title"],
      "properties": {
        "assignee": {
          "description": "username of assignee",
          "type": "string",
          "x-go-name": "Assignee"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Assignees"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "closed": {
          "type": "boolean",
          "x-go-name": "Closed"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "labels": {
          "description": "list of label ids",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Labels"
        },
        "milestone": {
          "description": "milestone id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Milestone"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateJobPostingOption": {
      "description": "CreateJobPostingOption options for creating a job posting",
      "type": "object",
      "required": ["title"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "pay_range": {
          "type": "string",
          "x-go-name": "PayRange"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateKeyOption": {
      "description": "CreateKeyOption options when creating a key",
      "type": "object",
      "required": ["title", "key"],
      "properties": {
        "key": {
          "description": "An armored SSH key to add",
          "type": "string",
          "uniqueItems": true,
          "x-go-name": "Key"
        },
        "read_only": {
          "description": "Describe if the key has only read access or read/write",
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "title": {
          "description": "Title of the key to add",
          "type": "string",
          "uniqueItems": true,
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateLabelOption": {
      "description": "CreateLabelOption options for creating a label",
      "type": "object",
      "required": ["name", "color"],
      "properties": {
        "color": {
          "type": "string",
          "x-go-name": "Color",
          "example": "#00aabb"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateMilestoneOption": {
      "description": "CreateMilestoneOption options for creating a milestone",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "due_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateOrgOption": {
      "description": "CreateOrgOption options for creating an organization",
      "type": "object",
      "required": ["username"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreatePasswordOption": {
      "description": "CreatePasswordOption",
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreatePreOrgOption": {
      "description": "CreatePreOrgOption options for creating a pre-org",
      "type": "object",
      "required": ["name"],
      "properties": {
        "alma_mater": {
          "type": "string",
          "x-go-name": "AlmaMater"
        },
        "avatar": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Avatar"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreOrgJob"
          },
          "x-go-name": "Jobs"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreOrgMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateProjectOption": {
      "type": "object",
      "required": ["name", "display_name", "synopsis", "description"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "synopsis": {
          "type": "string",
          "x-go-name": "Synopsis"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateProjectSprintOption": {
      "type": "object",
      "required": ["module", "name", "estimated_time", "budget", "currency"],
      "properties": {
        "budget": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Budget"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "estimated_time": {
          "description": "Estimated number of months needed to complete the sprint",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EstimatedTime"
        },
        "module": {
          "type": "string",
          "x-go-name": "Module"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreatePullRequestOption": {
      "description": "CreatePullRequestOption options when creating a pull request",
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "x-go-name": "Assignee"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Assignees"
        },
        "base": {
          "type": "string",
          "x-go-name": "Base"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "head": {
          "type": "string",
          "x-go-name": "Head"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Labels"
        },
        "milestone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Milestone"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateRegTokenOption": {
      "description": "CreateRegTokenOption options when creating a user registration token",
      "type": "object",
      "required": ["token"],
      "properties": {
        "token": {
          "description": "A registration token to add",
          "type": "string",
          "uniqueItems": true,
          "x-go-name": "Token"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateReleaseOption": {
      "description": "CreateReleaseOption options when creating a release",
      "type": "object",
      "required": ["tag_name"],
      "properties": {
        "body": {
          "type": "string",
          "x-go-name": "Note"
        },
        "draft": {
          "type": "boolean",
          "x-go-name": "IsDraft"
        },
        "name": {
          "type": "string",
          "x-go-name": "Title"
        },
        "prerelease": {
          "type": "boolean",
          "x-go-name": "IsPrerelease"
        },
        "tag_name": {
          "type": "string",
          "x-go-name": "TagName"
        },
        "target_commitish": {
          "type": "string",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateRepoOption": {
      "description": "CreateRepoOption options when creating repository",
      "type": "object",
      "required": ["name"],
      "properties": {
        "auto_init": {
          "description": "Whether the repository should be auto-intialized?",
          "type": "boolean",
          "x-go-name": "AutoInit"
        },
        "description": {
          "description": "Description of the repository to create",
          "type": "string",
          "x-go-name": "Description"
        },
        "gitignores": {
          "description": "Gitignores to use",
          "type": "string",
          "x-go-name": "Gitignores"
        },
        "license": {
          "description": "License to use",
          "type": "string",
          "x-go-name": "License"
        },
        "name": {
          "description": "Name of the repository to create",
          "type": "string",
          "uniqueItems": true,
          "x-go-name": "Name"
        },
        "private": {
          "description": "Whether the repository is private",
          "type": "boolean",
          "x-go-name": "Private"
        },
        "readme": {
          "description": "Readme of the repository to create",
          "type": "string",
          "x-go-name": "Readme"
        },
        "tech_stack": {
          "description": "Tech stack of the repository",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateRequestOption": {
      "description": "CreateRequestOption options for creating a request",
      "type": "object",
      "required": ["method", "path"],
      "properties": {
        "method": {
          "type": "string",
          "x-go-name": "Method"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateSeededUserOption": {
      "description": "CreateSeededUserOption create user options",
      "type": "object",
      "required": ["username", "email", "password", "kind", "seed"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "kind": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Kind"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "seed": {
          "type": "string",
          "x-go-name": "Seed"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateSessionOption": {
      "description": "CreateSessionOption",
      "type": "object",
      "required": ["user_name", "password"],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "remember": {
          "type": "boolean",
          "x-go-name": "Remember"
        },
        "user_name": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateStatusOption": {
      "description": "CreateStatusOption holds the information needed to create a new Status for a Commit",
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "x-go-name": "Context"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "state": {
          "$ref": "#/definitions/StatusState"
        },
        "target_url": {
          "type": "string",
          "x-go-name": "TargetURL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateStudentOption": {
      "description": "CreateStudentOption create student options",
      "type": "object",
      "required": ["username", "email", "password", "tech_stack"],
      "properties": {
        "alma_mater": {
          "type": "string",
          "x-go-name": "AlmaMater"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "grad_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GradYear"
        },
        "major": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Major"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateTeamOption": {
      "description": "CreateTeamOption options for creating a team",
      "type": "object",
      "required": ["name"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "permission": {
          "type": "string",
          "enum": ["read", "write", "admin"],
          "x-go-name": "Permission"
        },
        "units": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Units"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "CreateUserOption": {
      "description": "CreateUserOption create user options",
      "type": "object",
      "required": ["username", "email", "password", "kind"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "kind": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Kind"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Currency": {
      "type": "string",
      "x-go-package": "algora/modules/payment"
    },
    "DeleteEmailAddressOption": {
      "description": "DeleteEmailAddressOption options when deleting email addresses",
      "type": "object",
      "properties": {
        "emails": {
          "description": "email addresses to delete",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Emails"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "DeployKey": {
      "description": "DeployKey a deploy key",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "fingerprint": {
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "key_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "KeyID"
        },
        "read_only": {
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "repository": {
          "$ref": "#/definitions/Repository"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Document": {
      "description": "Document a generic document",
      "type": "object",
      "required": [
        "id",
        "name",
        "size",
        "created_at",
        "uuid",
        "browser_download_url",
        "poster",
        "org",
        "root_id"
      ],
      "properties": {
        "browser_download_url": {
          "type": "string",
          "x-go-name": "DownloadURL"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "org": {
          "$ref": "#/definitions/User"
        },
        "poster": {
          "$ref": "#/definitions/User"
        },
        "root_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RootID"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditAttachmentOptions": {
      "description": "EditAttachmentOptions options for editing attachments",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditBountyOption": {
      "description": "EditBountyOption options to edit bounty",
      "type": "object",
      "required": ["payment_type", "payment_source_id"],
      "properties": {
        "payment_source_id": {
          "type": "string",
          "x-go-name": "PaymentSourceID"
        },
        "payment_type": {
          "type": "string",
          "enum": ["card", "fpx", "ideal", "sepa_debit", "ach_debit"],
          "x-go-name": "PaymentType"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditDeadlineOption": {
      "description": "EditDeadlineOption options for creating a deadline",
      "type": "object",
      "required": ["due_date"],
      "properties": {
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditHookOption": {
      "description": "EditHookOption options when modify one hook",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Config"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Events"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditIssueCommentOption": {
      "description": "EditIssueCommentOption options for editing a comment",
      "type": "object",
      "required": ["body"],
      "properties": {
        "body": {
          "type": "string",
          "x-go-name": "Body"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditIssueOption": {
      "description": "EditIssueOption options for editing an issue",
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "x-go-name": "Assignee"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Assignees"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "milestone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Milestone"
        },
        "state": {
          "type": "string",
          "enum": ["open", "closed"],
          "x-go-name": "State"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditJobPostingOption": {
      "description": "EditJobPostingOption edit job posting options",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditLabelOption": {
      "description": "EditLabelOption options for editing a label",
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "x-go-name": "Color"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditMilestoneOption": {
      "description": "EditMilestoneOption options for editing a milestone",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "due_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditOrgOption": {
      "description": "EditOrgOption options for editing an organization",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditPreOrgOption": {
      "description": "EditPreOrgOption options for editing a pre-org",
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreOrgJob"
          },
          "x-go-name": "Jobs"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditPullRequestOption": {
      "description": "EditPullRequestOption options when modify pull request",
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "x-go-name": "Assignee"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Assignees"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Labels"
        },
        "milestone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Milestone"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditReleaseOption": {
      "description": "EditReleaseOption options when editing a release",
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "x-go-name": "Note"
        },
        "draft": {
          "type": "boolean",
          "x-go-name": "IsDraft"
        },
        "name": {
          "type": "string",
          "x-go-name": "Title"
        },
        "prerelease": {
          "type": "boolean",
          "x-go-name": "IsPrerelease"
        },
        "tag_name": {
          "type": "string",
          "x-go-name": "TagName"
        },
        "target_commitish": {
          "type": "string",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditRepoOption": {
      "description": "EditRepoOption options when editing repository",
      "type": "object",
      "properties": {
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditTeamOption": {
      "description": "EditTeamOption options for editing a team",
      "type": "object",
      "required": ["name"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "permission": {
          "type": "string",
          "enum": ["read", "write", "admin"],
          "x-go-name": "Permission"
        },
        "units": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Units"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditUnsubscriptionOption": {
      "description": "EditUnsubscriptionOption edit unsubscription options",
      "type": "object",
      "required": ["reason"],
      "properties": {
        "reason": {
          "type": "string",
          "x-go-name": "Reason"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EditUserOption": {
      "description": "EditUserOption edit user options",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "github": {
          "type": "string",
          "x-go-name": "Github"
        },
        "keep_email_private": {
          "type": "boolean",
          "x-go-name": "KeepEmailPrivate"
        },
        "language": {
          "type": "string",
          "x-go-name": "Language"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Education": {
      "type": "object",
      "title": "Education is an education section belonging to a user.",
      "required": ["id", "institution", "degree", "fields", "graduated"],
      "properties": {
        "activities": {
          "type": "string",
          "x-go-name": "Activities"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "grade": {
          "type": "number",
          "format": "float",
          "x-go-name": "Grade"
        },
        "graduated": {
          "type": "boolean",
          "x-go-name": "Graduated"
        },
        "graduation_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GraduationYear"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "institution": {
          "type": "string",
          "x-go-name": "Institution"
        },
        "logo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LogoID"
        },
        "study_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StudyYear"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Email": {
      "description": "Email represents an Algora email",
      "type": "object",
      "required": [
        "id",
        "from",
        "to",
        "template",
        "subject",
        "version",
        "open_count",
        "clicked_paths",
        "created_at"
      ],
      "properties": {
        "clicked_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Clicked"
        },
        "clicked_paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ClickedPaths"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "identifier": {
          "type": "string",
          "x-go-name": "Identifier"
        },
        "open_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OpenCount"
        },
        "opened_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Opened"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "to": {
          "type": "string",
          "x-go-name": "To"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EmailAddress": {
      "description": "EmailAddress an email address belonging to a user",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "primary": {
          "type": "boolean",
          "x-go-name": "Primary"
        },
        "verified": {
          "type": "boolean",
          "x-go-name": "Verified"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Entity": {
      "description": "Entity represents some entity",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "linked_in_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LinkedInID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "$ref": "#/definitions/EntityType"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "EntityType": {
      "description": "EntityType defines the entity type",
      "type": "integer",
      "format": "int64",
      "x-go-package": "algora/modules/structs"
    },
    "Experience": {
      "type": "object",
      "title": "Experience is an experience section belonging to a user.",
      "required": [
        "id",
        "organization",
        "title",
        "is_current_job",
        "is_primary",
        "end_date"
      ],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "end_date": {
          "type": "string",
          "x-go-name": "EndDate"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "is_current_job": {
          "type": "boolean",
          "x-go-name": "IsCurrentJob"
        },
        "is_primary": {
          "type": "boolean",
          "x-go-name": "IsPrimary"
        },
        "logo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LogoID"
        },
        "organization": {
          "type": "string",
          "x-go-name": "Organization"
        },
        "start_date": {
          "type": "string",
          "x-go-name": "StartDate"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ExtendedUser": {
      "description": "ExtendedUser represents a user with extended information",
      "type": "object",
      "required": [
        "id",
        "login",
        "full_name",
        "email",
        "avatar_url",
        "website",
        "location",
        "language",
        "is_organization",
        "kind",
        "tech",
        "linkedin",
        "github",
        "education",
        "experience",
        "use_case",
        "num_earned_bounties",
        "created_at",
        "is_admin",
        "is_curator",
        "notification_unread_count",
        "workspace_id",
        "owned_orgs",
        "dashboard_orgs",
        "community_enabled",
        "onboarding"
      ],
      "properties": {
        "alma_mater": {
          "type": "string",
          "x-go-name": "AlmaMater"
        },
        "avatar_url": {
          "description": "URL to the user's avatar",
          "type": "string",
          "x-go-name": "AvatarURL"
        },
        "community_enabled": {
          "type": "boolean",
          "x-go-name": "CommunityEnabled"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "dashboard_orgs": {
          "description": "Dashboard organizations of the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          },
          "x-go-name": "DashboardOrgs"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "education": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Education"
          },
          "x-go-name": "Education"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "experience": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Experience"
          },
          "x-go-name": "Experience"
        },
        "full_name": {
          "description": "the user's full name",
          "type": "string",
          "x-go-name": "FullName"
        },
        "github": {
          "type": "string",
          "x-go-name": "Github"
        },
        "grad_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GradYear"
        },
        "how_did_you_hear_about_us": {
          "type": "string",
          "x-go-name": "HowDidYouHearAboutUs"
        },
        "id": {
          "description": "the user's id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "is_admin": {
          "description": "Whether or not the user is an admin",
          "type": "boolean",
          "x-go-name": "IsAdmin"
        },
        "is_curator": {
          "description": "Whether or not the user is a curator",
          "type": "boolean",
          "x-go-name": "IsCurator"
        },
        "is_organization": {
          "description": "whether or not user is an organization",
          "type": "boolean",
          "x-go-name": "IsOrganization"
        },
        "kind": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Kind"
        },
        "language": {
          "description": "User locale",
          "type": "string",
          "x-go-name": "Language"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "login": {
          "description": "the user's username",
          "type": "string",
          "x-go-name": "UserName"
        },
        "major": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Major"
        },
        "notification_unread_count": {
          "description": "Number of unread notifications",
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotificationUnreadCount"
        },
        "num_earned_bounties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumEarnedBounties"
        },
        "onboarding": {
          "$ref": "#/definitions/UserOnboarding"
        },
        "owned_orgs": {
          "description": "Owned organizations of the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          },
          "x-go-name": "OwnedOrgs"
        },
        "resume_url": {
          "type": "string",
          "x-go-name": "ResumeURL"
        },
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "use_case": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "UseCase"
        },
        "use_case_other": {
          "type": "string",
          "x-go-name": "UseCaseOther"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        },
        "workspace_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WorkspaceID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "FounderActivity": {
      "description": "FounderActivity represents the activity of a founder",
      "type": "object",
      "required": [
        "user",
        "num_owned_repos",
        "num_funded_bounties",
        "num_created_bounties_last_month",
        "total_bounty_payouts",
        "total_bounty_payouts_last_month",
        "created_at"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "first_job": {
          "$ref": "#/definitions/JobPosting"
        },
        "first_job_bounty": {
          "$ref": "#/definitions/Bounty"
        },
        "first_job_candidate": {
          "$ref": "#/definitions/JobCandidate"
        },
        "first_org": {
          "$ref": "#/definitions/Organization"
        },
        "first_repo": {
          "$ref": "#/definitions/Repository"
        },
        "last_login_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastLoginAt"
        },
        "num_created_bounties_last_month": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumCreatedBountiesLastMonth"
        },
        "num_funded_bounties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumFundedBounties"
        },
        "num_owned_repos": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumOwnedRepos"
        },
        "total_bounty_payouts": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalBountyPayouts"
        },
        "total_bounty_payouts_last_month": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalBountyPayoutsLastMonth"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "GPGKey": {
      "description": "GPGKey a user GPG key to sign commit and tag in repository",
      "type": "object",
      "properties": {
        "can_certify": {
          "type": "boolean",
          "x-go-name": "CanCertify"
        },
        "can_encrypt_comms": {
          "type": "boolean",
          "x-go-name": "CanEncryptComms"
        },
        "can_encrypt_storage": {
          "type": "boolean",
          "x-go-name": "CanEncryptStorage"
        },
        "can_sign": {
          "type": "boolean",
          "x-go-name": "CanSign"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GPGKeyEmail"
          },
          "x-go-name": "Emails"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expires"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "key_id": {
          "type": "string",
          "x-go-name": "KeyID"
        },
        "primary_key_id": {
          "type": "string",
          "x-go-name": "PrimaryKeyID"
        },
        "public_key": {
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "subkeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GPGKey"
          },
          "x-go-name": "SubsKey"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "GPGKeyEmail": {
      "description": "GPGKeyEmail an email attached to a GPGKey",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "verified": {
          "type": "boolean",
          "x-go-name": "Verified"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "GitObject": {
      "type": "object",
      "title": "GitObject represents a Git object.",
      "properties": {
        "sha": {
          "type": "string",
          "x-go-name": "SHA"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Institution": {
      "description": "Institution represents an institution",
      "type": "object",
      "properties": {
        "avatar_url": {
          "type": "string",
          "x-go-name": "AvatarURL"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Interview": {
      "description": "Interview represents a job interview",
      "type": "object",
      "required": ["id", "title", "reward", "created_at"],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "reward": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "InviteSolverOption": {
      "description": "InviteSolverOption options to invite a solver to a bounty",
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "InviteeActivity": {
      "description": "InviteeActivity represents the activity of a invitee",
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "solver_activity": {
          "$ref": "#/definitions/SolverActivity"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Issue": {
      "description": "Issue represents an issue in a repository",
      "type": "object",
      "required": [
        "id",
        "url",
        "number",
        "user",
        "title",
        "body",
        "labels",
        "assignees",
        "repo",
        "state",
        "comments",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "assignee": {
          "$ref": "#/definitions/User"
        },
        "assignees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Assignees"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "bounty": {
          "$ref": "#/definitions/BountyMeta"
        },
        "closed_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Closed"
        },
        "comments": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Comments"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Index"
        },
        "pull_request": {
          "$ref": "#/definitions/PullRequestMeta"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "state": {
          "description": "Whether the issue is open or closed",
          "type": "string",
          "enum": ["open", "closed"],
          "x-go-name": "State"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "IssueDeadline": {
      "description": "IssueDeadline represents an issue deadline",
      "type": "object",
      "properties": {
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "IssueLabelsOption": {
      "description": "IssueLabelsOption a collection of labels",
      "type": "object",
      "properties": {
        "labels": {
          "description": "list of label IDs",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Labels"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "IssueSolutionProgress": {
      "description": "IssueSolutionProgress represents the progress of a user in solving an issue",
      "type": "object",
      "required": ["cloned", "pushed", "created_at"],
      "properties": {
        "cloned": {
          "type": "boolean",
          "x-go-name": "HasCloned"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "fork": {
          "$ref": "#/definitions/Repository"
        },
        "pull_request": {
          "$ref": "#/definitions/PullRequest"
        },
        "pushed": {
          "type": "boolean",
          "x-go-name": "HasPushed"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "JobCandidate": {
      "description": "JobCandidate represents a candidate for a job posting",
      "type": "object",
      "required": ["id", "email", "status", "created_at"],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "status": {
          "type": "string",
          "enum": ["invited", "accepted", "applied"],
          "x-go-name": "Status"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "JobPosting": {
      "description": "JobPosting represents a job posting",
      "type": "object",
      "required": [
        "id",
        "title",
        "tech_stack",
        "status",
        "org",
        "is_active",
        "candidates",
        "issues",
        "bounties",
        "interviews",
        "created_at"
      ],
      "properties": {
        "bounties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bounty"
          },
          "x-go-name": "Bounties"
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobCandidate"
          },
          "x-go-name": "Candidates"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "interviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interview"
          },
          "x-go-name": "Interviews"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "issues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Issue"
          },
          "x-go-name": "Issues"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "org": {
          "$ref": "#/definitions/Organization"
        },
        "pay_range": {
          "type": "string",
          "x-go-name": "PayRange"
        },
        "status": {
          "type": "string",
          "enum": ["screening", "active"],
          "x-go-name": "Status"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "LabProject": {
      "type": "object",
      "required": [
        "org",
        "name",
        "display_name",
        "synopsis",
        "description",
        "tags",
        "sponsors",
        "milestones",
        "created_at"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "milestones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectMilestone"
          },
          "x-go-name": "Milestones"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "org": {
          "$ref": "#/definitions/Organization"
        },
        "sponsors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectSponsor"
          },
          "x-go-name": "Sponsors"
        },
        "synopsis": {
          "type": "string",
          "x-go-name": "Synopsis"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Label": {
      "description": "Label a label to an issue or a pr",
      "type": "object",
      "required": ["id", "name", "color", "url"],
      "properties": {
        "color": {
          "type": "string",
          "x-go-name": "Color",
          "example": "00aabb"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "LinkAccountOption": {
      "description": "LinkAccountOption options when linking a bank account",
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "public_token": {
          "type": "string",
          "x-go-name": "PublicToken"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "MarkdownOption": {
      "description": "MarkdownOption markdown options",
      "type": "object",
      "properties": {
        "Context": {
          "description": "Context to render\n\nin: body",
          "type": "string"
        },
        "Mode": {
          "description": "Mode to render\n\nin: body",
          "type": "string"
        },
        "Text": {
          "description": "Text markdown to render\n\nin: body",
          "type": "string"
        },
        "Wiki": {
          "description": "Is it a wiki page ?\n\nin: body",
          "type": "boolean"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Message": {
      "description": "Message represents a chat message",
      "type": "object",
      "required": [
        "id",
        "uuid",
        "poster_id",
        "poster_name",
        "poster_avatar_url",
        "repo_id",
        "content",
        "rendered_content",
        "attachments",
        "attachment_uuids",
        "reactions",
        "created_unix",
        "show_tag"
      ],
      "properties": {
        "attachment_uuids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AttachmentUUIDs"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "x-go-name": "Attachments"
        },
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created_unix": {
          "$ref": "#/definitions/TimeStamp"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "poster_avatar_url": {
          "type": "string",
          "x-go-name": "PosterAvatarURL"
        },
        "poster_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PosterID"
        },
        "poster_name": {
          "type": "string",
          "x-go-name": "PosterName"
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reaction"
          },
          "x-go-name": "Reactions"
        },
        "rendered_content": {
          "type": "string",
          "x-go-name": "RenderedContent"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "show_tag": {
          "type": "string",
          "enum": ["none", "writer", "owner"],
          "x-go-name": "ShowTag"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Metrics": {
      "description": "Metrics represents the platform metrics",
      "type": "object",
      "required": ["active_users", "active_users_last_month"],
      "properties": {
        "active_users": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActiveUsers"
        },
        "active_users_last_month": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActiveUsersLastMonth"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "MigrateRepoForm": {
      "description": "MigrateRepoForm form for migrating repository",
      "type": "object",
      "required": ["clone_addr", "uid", "repo_name"],
      "properties": {
        "auth_password": {
          "type": "string",
          "x-go-name": "AuthPassword"
        },
        "auth_username": {
          "type": "string",
          "x-go-name": "AuthUsername"
        },
        "clone_addr": {
          "type": "string",
          "x-go-name": "CloneAddr"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "mirror": {
          "type": "boolean",
          "x-go-name": "Mirror"
        },
        "private": {
          "type": "boolean",
          "x-go-name": "Private"
        },
        "repo_name": {
          "type": "string",
          "x-go-name": "RepoName"
        },
        "uid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UID"
        }
      },
      "x-go-package": "algora/modules/auth"
    },
    "Milestone": {
      "description": "Milestone milestone is a collection of issues on one repository",
      "type": "object",
      "required": [
        "id",
        "title",
        "description",
        "state",
        "open_issues",
        "closed_issues"
      ],
      "properties": {
        "closed_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Closed"
        },
        "closed_issues": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClosedIssues"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "due_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "open_issues": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OpenIssues"
        },
        "state": {
          "type": "string",
          "enum": ["open", "closed"],
          "x-go-name": "State"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Notification": {
      "description": "Notification represents a notification",
      "type": "object",
      "required": [
        "id",
        "status",
        "source",
        "issue_id",
        "commit_id",
        "event",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "commit_id": {
          "type": "string",
          "x-go-name": "CommitID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "event": {
          "type": "string",
          "x-go-name": "Event"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "issue_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssueID"
        },
        "source": {
          "type": "string",
          "enum": ["issue", "pull", "commit", "bounty", "platform"],
          "x-go-name": "Source"
        },
        "status": {
          "type": "string",
          "enum": ["unread", "read", "pinned"],
          "x-go-name": "Status"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "OnboardingProgress": {
      "description": "OnboardingProgress represents the onboarding progress of a user",
      "type": "object",
      "required": [
        "greeted",
        "orgs_not_greeted",
        "signed_nda",
        "set_up_account",
        "shared_repo",
        "created_at"
      ],
      "properties": {
        "bounty": {
          "$ref": "#/definitions/Bounty"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "greeted": {
          "type": "boolean",
          "x-go-name": "HasGreeted"
        },
        "issue": {
          "$ref": "#/definitions/Issue"
        },
        "org": {
          "$ref": "#/definitions/Organization"
        },
        "orgs_not_greeted": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "OrgsNotGreeted"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "set_up_account": {
          "type": "boolean",
          "x-go-name": "HasSetUpAccount"
        },
        "shared_repo": {
          "type": "boolean",
          "x-go-name": "HasSharedRepo"
        },
        "signed_nda": {
          "type": "boolean",
          "x-go-name": "HasSignedNDA"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "OrgMember": {
      "description": "OrgMember represents an organization member",
      "type": "object",
      "required": ["user"],
      "properties": {
        "position": {
          "type": "string",
          "x-go-name": "Position"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "OrgOnboarding": {
      "type": "object",
      "required": ["create_bounties", "create_jobs"],
      "properties": {
        "create_bounties": {
          "type": "boolean",
          "x-go-name": "CreateBounties"
        },
        "create_jobs": {
          "type": "boolean",
          "x-go-name": "CreateJobs"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Organization": {
      "description": "Organization represents an organization",
      "type": "object",
      "required": [
        "id",
        "username",
        "full_name",
        "avatar_url",
        "description",
        "website",
        "location",
        "onboarding"
      ],
      "properties": {
        "alma_mater": {
          "type": "string",
          "x-go-name": "AlmaMater"
        },
        "avatar_url": {
          "type": "string",
          "x-go-name": "AvatarURL"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "onboarding": {
          "$ref": "#/definitions/OrgOnboarding"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PRBranchInfo": {
      "description": "PRBranchInfo information about a branch",
      "type": "object",
      "required": ["label", "ref", "sha", "repo_id", "repo"],
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ref": {
          "type": "string",
          "x-go-name": "Ref"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "repo_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoID"
        },
        "sha": {
          "type": "string",
          "x-go-name": "Sha"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PayloadCommit": {
      "description": "PayloadCommit represents a commit",
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/PayloadUser"
        },
        "committer": {
          "$ref": "#/definitions/PayloadUser"
        },
        "id": {
          "description": "sha1 hash of the commit",
          "type": "string",
          "x-go-name": "ID"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Timestamp"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "verification": {
          "$ref": "#/definitions/PayloadCommitVerification"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PayloadCommitVerification": {
      "description": "PayloadCommitVerification represents the GPG verification of a commit",
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "x-go-name": "Payload"
        },
        "reason": {
          "type": "string",
          "x-go-name": "Reason"
        },
        "signature": {
          "type": "string",
          "x-go-name": "Signature"
        },
        "verified": {
          "type": "boolean",
          "x-go-name": "Verified"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PayloadUser": {
      "description": "PayloadUser represents the author or committer of a commit",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "name": {
          "description": "Full name of the commit author",
          "type": "string",
          "x-go-name": "Name"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Payment": {
      "description": "Payment represents a bounty payment made by a user",
      "type": "object",
      "required": ["id", "status", "bounty", "pull_request", "created_at"],
      "properties": {
        "bounty": {
          "$ref": "#/definitions/Bounty"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "pull_request": {
          "$ref": "#/definitions/PullRequest"
        },
        "status": {
          "type": "string",
          "enum": ["none", "processing", "succeeded", "failed"],
          "x-go-name": "Status"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PaymentAmount": {
      "description": "PaymentAmount is a positive integer representing how much to charge in the\nsmallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge\n¥100, a zero-decimal currency)",
      "type": "integer",
      "format": "int64",
      "x-go-package": "algora/modules/payment"
    },
    "PaymentDetails": {
      "description": "PaymentDetails represents payment details of a bounty",
      "type": "object",
      "required": [
        "bounty_index",
        "amount",
        "application_fee_amount",
        "source_id",
        "client_secret"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "application_fee_amount": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "bounty_index": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BountyIndex"
        },
        "client_secret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "source_id": {
          "type": "string",
          "x-go-name": "SourceID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PaymentType": {
      "type": "string",
      "x-go-package": "algora/modules/payment"
    },
    "Permission": {
      "description": "Permission represents a set of permissions",
      "type": "object",
      "required": ["admin", "push", "pull"],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "pull": {
          "type": "boolean",
          "x-go-name": "Pull"
        },
        "push": {
          "type": "boolean",
          "x-go-name": "Push"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PreOrg": {
      "description": "PreOrg represents a pre-org",
      "type": "object",
      "required": ["id", "org", "avatar", "members", "jobs", "created_at"],
      "properties": {
        "avatar": {
          "type": "string",
          "x-go-name": "Avatar"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobPosting"
          },
          "x-go-name": "Jobs"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgMember"
          },
          "x-go-name": "Members"
        },
        "org": {
          "$ref": "#/definitions/Organization"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PreOrgJob": {
      "type": "object",
      "required": ["title"],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PreOrgMember": {
      "type": "object",
      "required": ["name", "full_name", "email"],
      "properties": {
        "alma_mater": {
          "type": "string",
          "x-go-name": "AlmaMater"
        },
        "avatar": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Avatar"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PreUserStartup": {
      "description": "PreUserStartup represents a startup who has requested access on Algora",
      "type": "object",
      "required": ["id", "name", "tech", "startup_url"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "startup_name": {
          "type": "string",
          "x-go-name": "StartupName"
        },
        "startup_url": {
          "type": "string",
          "x-go-name": "StartupURL"
        },
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PreUserStudent": {
      "description": "PreUserStudent represents a student who has requested access on Algora",
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "experience",
        "school",
        "degree",
        "grad_year",
        "major",
        "created_at"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "experience": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "github": {
          "type": "string",
          "x-go-name": "Github"
        },
        "grad_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GradYear"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "major": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Major"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resume_url": {
          "description": "URL to the student's resume",
          "type": "string",
          "x-go-name": "ResumeURL"
        },
        "school": {
          "type": "string",
          "x-go-name": "School"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ProjectContributor": {
      "type": "object",
      "required": ["user", "position", "reward", "created_at"],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "position": {
          "type": "string",
          "x-go-name": "Position"
        },
        "reward": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ProjectMilestone": {
      "type": "object",
      "required": ["content", "created_at"],
      "properties": {
        "completed_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CompletedAt"
        },
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ProjectSponsor": {
      "type": "object",
      "required": [
        "user",
        "sprint",
        "display_name",
        "status",
        "source_id",
        "client_secret",
        "created_at"
      ],
      "properties": {
        "client_secret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "source_id": {
          "type": "string",
          "x-go-name": "SourceID"
        },
        "sprint": {
          "$ref": "#/definitions/ProjectSprint"
        },
        "status": {
          "type": "string",
          "enum": ["none", "processing", "succeeded", "failed"],
          "x-go-name": "Status"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ProjectSprint": {
      "type": "object",
      "required": [
        "id",
        "module",
        "name",
        "estimated_time",
        "budget",
        "reward",
        "currency",
        "contributors",
        "created_at"
      ],
      "properties": {
        "budget": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "contributors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectContributor"
          },
          "x-go-name": "Contributors"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "estimated_time": {
          "description": "Estimated number of months needed to complete the sprint",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EstimatedTime"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "module": {
          "type": "string",
          "x-go-name": "Module"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "reward": {
          "$ref": "#/definitions/PaymentAmount"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PublicKey": {
      "description": "PublicKey publickey is a user key to push code to repository",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "fingerprint": {
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "key_type": {
          "type": "string",
          "x-go-name": "KeyType"
        },
        "read_only": {
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PullRequest": {
      "description": "PullRequest represents a pull request",
      "type": "object",
      "required": [
        "id",
        "url",
        "number",
        "user",
        "title",
        "body",
        "labels",
        "assignees",
        "repo",
        "state",
        "comments",
        "issue_id",
        "html_url",
        "diff_url",
        "patch_url",
        "mergeable",
        "merged",
        "merge_base",
        "payment_status",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "assignee": {
          "$ref": "#/definitions/User"
        },
        "assignees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Assignees"
        },
        "base": {
          "$ref": "#/definitions/PRBranchInfo"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "closed_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Closed"
        },
        "comments": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Comments"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "diff_url": {
          "type": "string",
          "x-go-name": "DiffURL"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "head": {
          "$ref": "#/definitions/PRBranchInfo"
        },
        "html_url": {
          "type": "string",
          "x-go-name": "HTMLURL"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "issue_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssueID"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "merge_base": {
          "type": "string",
          "x-go-name": "MergeBase"
        },
        "merge_commit_sha": {
          "type": "string",
          "x-go-name": "MergedCommitID"
        },
        "mergeable": {
          "type": "boolean",
          "x-go-name": "Mergeable"
        },
        "merged": {
          "type": "boolean",
          "x-go-name": "HasMerged"
        },
        "merged_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Merged"
        },
        "merged_by": {
          "$ref": "#/definitions/User"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Index"
        },
        "patch_url": {
          "type": "string",
          "x-go-name": "PatchURL"
        },
        "payment_status": {
          "type": "string",
          "enum": ["processing", "succeeded", "failed", "none"],
          "x-go-name": "PaymentStatus"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "state": {
          "type": "string",
          "enum": ["open", "closed"],
          "x-go-name": "State"
        },
        "target_issue": {
          "$ref": "#/definitions/Issue"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "PullRequestMeta": {
      "description": "PullRequestMeta PR info if an issue is a PR",
      "type": "object",
      "required": ["merged"],
      "properties": {
        "merged": {
          "type": "boolean",
          "x-go-name": "HasMerged"
        },
        "merged_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Merged"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Reaction": {
      "description": "Reaction represents a reaction on issues, comments and messages",
      "type": "object",
      "required": [
        "id",
        "type",
        "issue_id",
        "comment_id",
        "message_id",
        "user_id",
        "user_name",
        "created_at"
      ],
      "properties": {
        "comment_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CommentID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "issue_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssueID"
        },
        "message_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MessageID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "user_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "user_name": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Reference": {
      "type": "object",
      "title": "Reference represents a Git reference.",
      "properties": {
        "object": {
          "$ref": "#/definitions/GitObject"
        },
        "ref": {
          "type": "string",
          "x-go-name": "Ref"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "RegToken": {
      "type": "object",
      "title": "RegToken represents a Firebase Cloud Messaging device registration token.",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Release": {
      "description": "Release represents a repository release",
      "type": "object",
      "required": [
        "id",
        "tag_name",
        "target_commitish",
        "name",
        "body",
        "url",
        "tarball_url",
        "zipball_url",
        "draft",
        "prerelease",
        "created_at",
        "published_at",
        "author",
        "assets"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "x-go-name": "Attachments"
        },
        "author": {
          "$ref": "#/definitions/User"
        },
        "body": {
          "type": "string",
          "x-go-name": "Note"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "draft": {
          "type": "boolean",
          "x-go-name": "IsDraft"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Title"
        },
        "prerelease": {
          "type": "boolean",
          "x-go-name": "IsPrerelease"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "PublishedAt"
        },
        "tag_name": {
          "type": "string",
          "x-go-name": "TagName"
        },
        "tarball_url": {
          "type": "string",
          "x-go-name": "TarURL"
        },
        "target_commitish": {
          "type": "string",
          "x-go-name": "Target"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "zipball_url": {
          "type": "string",
          "x-go-name": "ZipURL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "RenderEmailOption": {
      "description": "RenderEmailOption options when creating emails",
      "type": "object",
      "required": ["to", "template"],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Data"
        },
        "identifier": {
          "type": "string",
          "x-go-name": "Identifier"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "to": {
          "type": "string",
          "format": "email",
          "x-go-name": "To"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Repository": {
      "description": "Repository represents a repository",
      "type": "object",
      "required": [
        "id",
        "owner",
        "name",
        "display_name",
        "full_name",
        "description",
        "topics",
        "tech",
        "empty",
        "is_project",
        "screening",
        "private",
        "fork",
        "mirror",
        "size",
        "html_url",
        "ssh_url",
        "clone_url",
        "website",
        "stars_count",
        "forks_count",
        "watchers_count",
        "open_issues_count",
        "default_branch",
        "archived",
        "created_at",
        "updated_at",
        "permissions"
      ],
      "properties": {
        "archived": {
          "type": "boolean",
          "x-go-name": "Archived"
        },
        "clone_url": {
          "type": "string",
          "x-go-name": "CloneURL"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "default_branch": {
          "type": "string",
          "x-go-name": "DefaultBranch"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "empty": {
          "type": "boolean",
          "x-go-name": "Empty"
        },
        "fork": {
          "type": "boolean",
          "x-go-name": "Fork"
        },
        "forks_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Forks"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "html_url": {
          "type": "string",
          "x-go-name": "HTMLURL"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "is_project": {
          "type": "boolean",
          "x-go-name": "IsProject"
        },
        "mirror": {
          "type": "boolean",
          "x-go-name": "Mirror"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "open_issues_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OpenIssues"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "parent": {
          "$ref": "#/definitions/Repository"
        },
        "permissions": {
          "$ref": "#/definitions/Permission"
        },
        "private": {
          "type": "boolean",
          "x-go-name": "Private"
        },
        "screening": {
          "type": "boolean",
          "x-go-name": "Screening"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "ssh_url": {
          "type": "string",
          "x-go-name": "SSHURL"
        },
        "stars_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stars"
        },
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Topics"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "watchers_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Watchers"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Request": {
      "type": "object",
      "required": ["id", "method", "path", "user_agent", "created_at"],
      "properties": {
        "browser": {
          "type": "string",
          "x-go-name": "Browser"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "device": {
          "type": "string",
          "x-go-name": "Device"
        },
        "device_type": {
          "type": "string",
          "x-go-name": "DeviceType"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "method": {
          "type": "string",
          "x-go-name": "Method"
        },
        "os": {
          "type": "string",
          "x-go-name": "OS"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "user": {
          "$ref": "#/definitions/ExtendedUser"
        },
        "user_agent": {
          "type": "string",
          "x-go-name": "UserAgent"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SearchResults": {
      "description": "SearchResults results of a successful search",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Repository"
          },
          "x-go-name": "Data"
        },
        "ok": {
          "type": "boolean",
          "x-go-name": "OK"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SendJobDigestEmailOption": {
      "description": "SendJobDigestEmailOption options for sending a job digest email",
      "type": "object",
      "required": ["usernames"],
      "properties": {
        "usernames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Usernames"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "ServerVersion": {
      "description": "ServerVersion wraps the version of the server",
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SetPasswordOption": {
      "description": "SetPasswordOption",
      "type": "object",
      "required": ["code", "password"],
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SolutionProgress": {
      "description": "SolutionProgress represents the progress of solving a bounty",
      "type": "object",
      "required": ["access_mode"],
      "properties": {
        "access_mode": {
          "type": "string",
          "enum": ["none", "read", "write", "admin", "owner"],
          "x-go-name": "AccessMode"
        },
        "progress": {
          "$ref": "#/definitions/BountySolutionProgress"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SolverActivity": {
      "description": "SolverActivity represents the activity of a solver",
      "type": "object",
      "required": [
        "user",
        "num_solved_bounties",
        "num_created_pulls_last_month",
        "total_bounty_payouts",
        "total_bounty_payouts_last_month"
      ],
      "properties": {
        "bounty_solution_progress": {
          "$ref": "#/definitions/BountySolutionProgress"
        },
        "num_created_pulls_last_month": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumCreatedPullsLastMonth"
        },
        "num_solved_bounties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumSolvedBounties"
        },
        "pull": {
          "$ref": "#/definitions/PullRequest"
        },
        "total_bounty_payouts": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalBountyPayouts"
        },
        "total_bounty_payouts_last_month": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalBountyPayoutsLastMonth"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SponsorProjectOption": {
      "type": "object",
      "required": ["type", "source_id"],
      "properties": {
        "source_id": {
          "type": "string",
          "x-go-name": "SourceID"
        },
        "type": {
          "type": "string",
          "enum": ["card"],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SponsorshipDetails": {
      "type": "object",
      "required": [
        "amount",
        "application_fee_amount",
        "source_id",
        "client_secret"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "application_fee_amount": {
          "$ref": "#/definitions/PaymentAmount"
        },
        "client_secret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "source_id": {
          "type": "string",
          "x-go-name": "SourceID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "StartupPreSignupOption": {
      "description": "StartupPreSignupOption pre-signup options",
      "type": "object",
      "required": ["name", "email", "tech", "startup_url"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "startup_name": {
          "type": "string",
          "x-go-name": "StartupName"
        },
        "startup_url": {
          "type": "string",
          "x-go-name": "StartupURL"
        },
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "tel": {
          "type": "string",
          "x-go-name": "Tel"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Status": {
      "description": "Status holds a single Status of a single Commit",
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "x-go-name": "Context"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "creator": {
          "$ref": "#/definitions/User"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "status": {
          "$ref": "#/definitions/StatusState"
        },
        "target_url": {
          "type": "string",
          "x-go-name": "TargetURL"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "StatusState": {
      "description": "StatusState holds the state of a Status\nIt can be \"pending\", \"success\", \"error\", \"failure\", and \"warning\"",
      "type": "string",
      "x-go-package": "algora/modules/structs"
    },
    "Stopwatch": {
      "type": "object",
      "title": "Stopwatch represents a stopwatch for time tracking.",
      "required": ["id", "issue_id", "user_id", "created_at"],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "issue_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssueID"
        },
        "user_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "StudentPreSignupOption": {
      "description": "StudentPreSignupOption pre-signup options",
      "type": "object",
      "required": [
        "name",
        "email",
        "experience",
        "school",
        "degree",
        "grad_year",
        "major"
      ],
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "experience": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "github": {
          "type": "string",
          "x-go-name": "Github"
        },
        "grad_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GradYear"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "major": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Major"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "school": {
          "type": "string",
          "x-go-name": "School"
        },
        "tel": {
          "type": "string",
          "x-go-name": "Tel"
        },
        "user_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "SubscribeOption": {
      "description": "SubscribeOption subscriber options",
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "note": {
          "type": "string",
          "x-go-name": "Note"
        },
        "org_name": {
          "type": "string",
          "x-go-name": "OrgName"
        },
        "org_type": {
          "type": "string",
          "x-go-name": "OrgType"
        },
        "sponsorship_type": {
          "type": "string",
          "x-go-name": "SponsorshipType"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Subscriber": {
      "description": "Subscriber represents a subscriber",
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "note": {
          "type": "string",
          "x-go-name": "Note"
        },
        "org_name": {
          "type": "string",
          "x-go-name": "OrgName"
        },
        "org_type": {
          "type": "string",
          "x-go-name": "OrgType"
        },
        "sponsorship_type": {
          "type": "string",
          "x-go-name": "SponsorshipType"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Subscription": {
      "description": "Subscription represents an subscription",
      "type": "object",
      "required": ["id", "status", "created_at"],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "all",
            "canceled",
            "incomplete",
            "incomplete_expired",
            "past_due",
            "trialing",
            "unpaid"
          ],
          "x-go-name": "Status"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "Team": {
      "description": "Team represents a team in an organization",
      "type": "object",
      "required": [
        "id",
        "name",
        "full_name",
        "description",
        "permission",
        "units"
      ],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "permission": {
          "type": "string",
          "enum": ["none", "read", "write", "admin", "owner"],
          "x-go-name": "Permission"
        },
        "units": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Units"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "TimeStamp": {
      "description": "TimeStamp defines a timestamp",
      "type": "integer",
      "format": "int64",
      "x-go-package": "algora/modules/util"
    },
    "TrackedTime": {
      "description": "TrackedTime worked time for an issue / pr",
      "type": "object",
      "required": ["id", "created", "time", "user_id", "user", "issue_id"],
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "issue_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssueID"
        },
        "time": {
          "description": "Time in seconds",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Time"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "user_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "UnsubscribeOption": {
      "description": "UnsubscribeOption unsubscribe options",
      "type": "object",
      "required": ["code"],
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "UpdateProgressOption": {
      "description": "UpdateProgressOption options to update bounty solution progress",
      "type": "object",
      "required": ["cloned", "pushed"],
      "properties": {
        "cloned": {
          "type": "boolean",
          "x-go-name": "HasCloned"
        },
        "pushed": {
          "type": "boolean",
          "x-go-name": "HasPushed"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "User": {
      "description": "User represents a user",
      "type": "object",
      "required": [
        "id",
        "login",
        "full_name",
        "email",
        "avatar_url",
        "website",
        "location",
        "language",
        "is_organization",
        "kind",
        "tech",
        "linkedin",
        "github",
        "education",
        "experience",
        "use_case",
        "num_earned_bounties",
        "created_at"
      ],
      "properties": {
        "alma_mater": {
          "type": "string",
          "x-go-name": "AlmaMater"
        },
        "avatar_url": {
          "description": "URL to the user's avatar",
          "type": "string",
          "x-go-name": "AvatarURL"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "degree": {
          "type": "string",
          "x-go-name": "Degree"
        },
        "education": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Education"
          },
          "x-go-name": "Education"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "experience": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Experience"
          },
          "x-go-name": "Experience"
        },
        "full_name": {
          "description": "the user's full name",
          "type": "string",
          "x-go-name": "FullName"
        },
        "github": {
          "type": "string",
          "x-go-name": "Github"
        },
        "grad_year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GradYear"
        },
        "id": {
          "description": "the user's id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "is_organization": {
          "description": "whether or not user is an organization",
          "type": "boolean",
          "x-go-name": "IsOrganization"
        },
        "kind": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Kind"
        },
        "language": {
          "description": "User locale",
          "type": "string",
          "x-go-name": "Language"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linkedin"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "login": {
          "description": "the user's username",
          "type": "string",
          "x-go-name": "UserName"
        },
        "major": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Major"
        },
        "num_earned_bounties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumEarnedBounties"
        },
        "resume_url": {
          "type": "string",
          "x-go-name": "ResumeURL"
        },
        "tech": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        },
        "use_case": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "UseCase"
        },
        "use_case_other": {
          "type": "string",
          "x-go-name": "UseCaseOther"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "UserHeatmapData": {
      "description": "UserHeatmapData represents the contributions of a user in a given time",
      "type": "object",
      "required": ["timestamp", "contributions"],
      "properties": {
        "contributions": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Contributions"
        },
        "timestamp": {
          "$ref": "#/definitions/TimeStamp"
        }
      },
      "x-go-package": "algora/models"
    },
    "UserOnboarding": {
      "type": "object",
      "required": ["profile", "find_collaborators"],
      "properties": {
        "find_collaborators": {
          "type": "boolean",
          "x-go-name": "FindCollaborators"
        },
        "profile": {
          "type": "boolean",
          "x-go-name": "Profile"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "UserOnboardingProfileOption": {
      "type": "object",
      "required": ["tech_stack", "notify_jobs", "notify_bounties"],
      "properties": {
        "notify_bounties": {
          "type": "boolean",
          "x-go-name": "NotifyBounties"
        },
        "notify_jobs": {
          "type": "boolean",
          "x-go-name": "NotifyJobs"
        },
        "tech_stack": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tech"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "UserStats": {
      "description": "UserStats is a collection of user statistics",
      "type": "object",
      "required": [
        "num_accessible_repos",
        "num_earned_bounties",
        "total_bounty_earnings",
        "num_funded_bounties",
        "total_bounty_fundings"
      ],
      "properties": {
        "num_accessible_repos": {
          "description": "Number of repositories that the user has explicit permission (:read, :write, or :admin) to access.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumAccessibleRepos"
        },
        "num_earned_bounties": {
          "description": "Number of bounties that the user has earned",
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumEarnedBounties"
        },
        "num_funded_bounties": {
          "description": "Number of bounties that the user has directly or indirectly funded",
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumFundedBounties"
        },
        "total_bounty_earnings": {
          "description": "Total amount that the user has earned through bounties",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalBountyEarnings"
        },
        "total_bounty_fundings": {
          "description": "Total amount that the user has directly or indirectly funded through bounties",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalBountyFundings"
        }
      },
      "x-go-package": "algora/modules/structs"
    },
    "WatchInfo": {
      "description": "WatchInfo represents an API watch status of one repository",
      "type": "object",
      "required": [
        "subscribed",
        "ignored",
        "created_at",
        "url",
        "repository_url"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "ignored": {
          "type": "boolean",
          "x-go-name": "Ignored"
        },
        "reason": {
          "type": "object",
          "x-go-name": "Reason"
        },
        "repository_url": {
          "type": "string",
          "x-go-name": "RepositoryURL"
        },
        "subscribed": {
          "type": "boolean",
          "x-go-name": "Subscribed"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "algora/modules/structs"
    }
  },
  "responses": {
    "AccessToken": {
      "description": "AccessToken represents a API access token.",
      "headers": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "sha1": {
          "type": "string"
        }
      }
    },
    "AccessTokenList": {
      "description": "AccessTokenList represents a list of API access token.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AccessToken"
        }
      }
    },
    "AdminPreUserStartupList": {
      "description": "AdminPreUserStartupList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AdminPreUserStartup"
        }
      }
    },
    "AdminPreUserStudent": {
      "description": "AdminPreUserStudent",
      "schema": {
        "$ref": "#/definitions/AdminPreUserStudent"
      }
    },
    "AdminPreUserStudentList": {
      "description": "AdminPreUserStudentList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AdminPreUserStudent"
        }
      }
    },
    "Attachment": {
      "description": "Attachment",
      "schema": {
        "$ref": "#/definitions/Attachment"
      }
    },
    "AttachmentList": {
      "description": "AttachmentList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Attachment"
        }
      }
    },
    "BankAccount": {
      "description": "BankAccount",
      "schema": {
        "$ref": "#/definitions/BankAccount"
      }
    },
    "BankAccountList": {
      "description": "BankAccountList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/BankAccount"
        }
      }
    },
    "Bounty": {
      "description": "Bounty",
      "schema": {
        "$ref": "#/definitions/Bounty"
      }
    },
    "BountyCandidate": {
      "description": "BountyCandidate",
      "schema": {
        "$ref": "#/definitions/BountyCandidate"
      }
    },
    "BountyList": {
      "description": "BountyList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Bounty"
        }
      }
    },
    "BountySolutionProgress": {
      "description": "BountySolutionProgress",
      "schema": {
        "$ref": "#/definitions/BountySolutionProgress"
      }
    },
    "Branch": {
      "description": "Branch",
      "schema": {
        "$ref": "#/definitions/Branch"
      }
    },
    "BranchList": {
      "description": "BranchList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Branch"
        }
      }
    },
    "Business": {
      "description": "Business",
      "schema": {
        "$ref": "#/definitions/Business"
      }
    },
    "CardPaymentMethod": {
      "description": "CardPaymentMethod",
      "schema": {
        "$ref": "#/definitions/CardPaymentMethod"
      }
    },
    "CardPaymentMethodList": {
      "description": "CardPaymentMethodList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CardPaymentMethod"
        }
      }
    },
    "Charge": {
      "description": "Charge",
      "schema": {
        "$ref": "#/definitions/Charge"
      }
    },
    "Comment": {
      "description": "Comment",
      "schema": {
        "$ref": "#/definitions/Comment"
      }
    },
    "CommentList": {
      "description": "CommentList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "Contract": {
      "description": "Contract",
      "schema": {
        "$ref": "#/definitions/Contract"
      }
    },
    "ContractList": {
      "description": "ContractList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Contract"
        }
      }
    },
    "DeployKey": {
      "description": "DeployKey",
      "schema": {
        "$ref": "#/definitions/DeployKey"
      }
    },
    "DeployKeyList": {
      "description": "DeployKeyList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DeployKey"
        }
      }
    },
    "Document": {
      "description": "Document",
      "schema": {
        "$ref": "#/definitions/Document"
      }
    },
    "DocumentList": {
      "description": "DocumentList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Document"
        }
      }
    },
    "Email": {
      "description": "Email",
      "schema": {
        "$ref": "#/definitions/Email"
      }
    },
    "EmailAddressList": {
      "description": "EmailAddressList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        }
      }
    },
    "EmailList": {
      "description": "EmailList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "Entity": {
      "description": "Entity",
      "schema": {
        "$ref": "#/definitions/Entity"
      }
    },
    "ExtendedUser": {
      "description": "ExtendedUser",
      "schema": {
        "$ref": "#/definitions/ExtendedUser"
      }
    },
    "FounderActivityList": {
      "description": "FounderActivityList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/FounderActivity"
        }
      }
    },
    "GPGKey": {
      "description": "GPGKey",
      "schema": {
        "$ref": "#/definitions/GPGKey"
      }
    },
    "GPGKeyList": {
      "description": "GPGKeyList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/GPGKey"
        }
      }
    },
    "Hook": {
      "description": "Hook",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Branch"
        }
      }
    },
    "HookList": {
      "description": "HookList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Branch"
        }
      }
    },
    "Institution": {
      "description": "Institution",
      "schema": {
        "$ref": "#/definitions/Institution"
      }
    },
    "Interview": {
      "description": "Interview",
      "schema": {
        "$ref": "#/definitions/Interview"
      }
    },
    "InterviewList": {
      "description": "InterviewList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Interview"
        }
      }
    },
    "InviteeActivityList": {
      "description": "InviteeActivityList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/InviteeActivity"
        }
      }
    },
    "Issue": {
      "description": "Issue",
      "schema": {
        "$ref": "#/definitions/Issue"
      }
    },
    "IssueDeadline": {
      "description": "IssueDeadline",
      "schema": {
        "$ref": "#/definitions/IssueDeadline"
      }
    },
    "IssueList": {
      "description": "IssueList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Issue"
        }
      }
    },
    "IssueSolutionProgress": {
      "description": "IssueSolutionProgress",
      "schema": {
        "$ref": "#/definitions/IssueSolutionProgress"
      }
    },
    "JobCandidate": {
      "description": "JobCandidate",
      "schema": {
        "$ref": "#/definitions/JobCandidate"
      }
    },
    "JobCandidateList": {
      "description": "JobCandidateList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/JobCandidate"
        }
      }
    },
    "JobPosting": {
      "description": "JobPosting",
      "schema": {
        "$ref": "#/definitions/JobPosting"
      }
    },
    "JobPostingList": {
      "description": "JobPostingList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/JobPosting"
        }
      }
    },
    "LabProject": {
      "description": "LabProject",
      "schema": {
        "$ref": "#/definitions/LabProject"
      }
    },
    "Label": {
      "description": "Label",
      "schema": {
        "$ref": "#/definitions/Label"
      }
    },
    "LabelList": {
      "description": "LabelList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Label"
        }
      }
    },
    "MarkdownRender": {
      "description": "MarkdownRender is a rendered markdown document",
      "schema": {
        "type": "string"
      }
    },
    "MessageList": {
      "description": "MessageList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Message"
        }
      }
    },
    "Metrics": {
      "description": "Metrics",
      "schema": {
        "$ref": "#/definitions/Metrics"
      }
    },
    "Milestone": {
      "description": "Milestone",
      "schema": {
        "$ref": "#/definitions/Milestone"
      }
    },
    "MilestoneList": {
      "description": "MilestoneList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Milestone"
        }
      }
    },
    "NotificationList": {
      "description": "NotificationList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Notification"
        }
      }
    },
    "OnboardingProgress": {
      "description": "OnboardingProgress",
      "schema": {
        "$ref": "#/definitions/OnboardingProgress"
      }
    },
    "OrgMemberList": {
      "description": "OrgMemberList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/OrgMember"
        }
      }
    },
    "Organization": {
      "description": "Organization",
      "schema": {
        "$ref": "#/definitions/Organization"
      }
    },
    "OrganizationList": {
      "description": "OrganizationList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "PaymentDetails": {
      "description": "PaymentDetails",
      "schema": {
        "$ref": "#/definitions/PaymentDetails"
      }
    },
    "PaymentList": {
      "description": "PaymentList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "PreOrg": {
      "description": "PreOrg",
      "schema": {
        "$ref": "#/definitions/PreOrg"
      }
    },
    "PreUserStartupList": {
      "description": "PreUserStartupList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PreUserStartup"
        }
      }
    },
    "PreUserStudentList": {
      "description": "PreUserStudentList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PreUserStudent"
        }
      }
    },
    "ProjectContributor": {
      "description": "ProjectContributor",
      "schema": {
        "$ref": "#/definitions/ProjectContributor"
      }
    },
    "ProjectSponsor": {
      "description": "ProjectSponsor",
      "schema": {
        "$ref": "#/definitions/ProjectSponsor"
      }
    },
    "ProjectSprint": {
      "description": "ProjectSprint",
      "schema": {
        "$ref": "#/definitions/ProjectSprint"
      }
    },
    "ProjectSprintList": {
      "description": "ProjectSprintList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ProjectSprint"
        }
      }
    },
    "PublicKey": {
      "description": "PublicKey",
      "schema": {
        "$ref": "#/definitions/PublicKey"
      }
    },
    "PublicKeyList": {
      "description": "PublicKeyList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PublicKey"
        }
      }
    },
    "PullRequest": {
      "description": "PullRequest",
      "schema": {
        "$ref": "#/definitions/PullRequest"
      }
    },
    "PullRequestList": {
      "description": "PullRequestList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PullRequest"
        }
      }
    },
    "Reference": {
      "description": "Reference",
      "schema": {
        "$ref": "#/definitions/Reference"
      }
    },
    "ReferenceList": {
      "description": "ReferenceList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Reference"
        }
      }
    },
    "RegToken": {
      "description": "RegToken",
      "schema": {
        "$ref": "#/definitions/RegToken"
      }
    },
    "Release": {
      "description": "Release",
      "schema": {
        "$ref": "#/definitions/Release"
      }
    },
    "ReleaseList": {
      "description": "ReleaseList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "Repository": {
      "description": "Repository",
      "schema": {
        "$ref": "#/definitions/Repository"
      }
    },
    "RepositoryList": {
      "description": "RepositoryList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Repository"
        }
      }
    },
    "Request": {
      "description": "Request",
      "schema": {
        "$ref": "#/definitions/Request"
      }
    },
    "RequestList": {
      "description": "RequestList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Request"
        }
      }
    },
    "SearchResults": {
      "description": "SearchResults",
      "schema": {
        "$ref": "#/definitions/SearchResults"
      }
    },
    "ServerVersion": {
      "description": "ServerVersion",
      "schema": {
        "$ref": "#/definitions/ServerVersion"
      }
    },
    "SolutionProgress": {
      "description": "SolutionProgress",
      "schema": {
        "$ref": "#/definitions/SolutionProgress"
      }
    },
    "SolverActivityList": {
      "description": "SolverActivityList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SolverActivity"
        }
      }
    },
    "SponsorshipDetails": {
      "description": "SponsorshipDetails",
      "schema": {
        "$ref": "#/definitions/SponsorshipDetails"
      }
    },
    "Status": {
      "description": "Status",
      "schema": {
        "$ref": "#/definitions/Status"
      }
    },
    "StatusList": {
      "description": "StatusList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Status"
        }
      }
    },
    "Stopwatch": {
      "description": "Stopwatch",
      "schema": {
        "$ref": "#/definitions/Stopwatch"
      }
    },
    "Subscriber": {
      "description": "Subscriber",
      "schema": {
        "$ref": "#/definitions/Subscriber"
      }
    },
    "Subscription": {
      "description": "Subscription",
      "schema": {
        "$ref": "#/definitions/Subscription"
      }
    },
    "Team": {
      "description": "Team",
      "schema": {
        "$ref": "#/definitions/Team"
      }
    },
    "TeamList": {
      "description": "TeamList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Team"
        }
      }
    },
    "TrackedTime": {
      "description": "TrackedTime",
      "schema": {
        "$ref": "#/definitions/TrackedTime"
      }
    },
    "TrackedTimeList": {
      "description": "TrackedTimeList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/TrackedTime"
        }
      }
    },
    "User": {
      "description": "User",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "UserHeatmapData": {
      "description": "UserHeatmapData",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/UserHeatmapData"
        }
      }
    },
    "UserList": {
      "description": "UserList",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "UserStats": {
      "description": "UserStats",
      "schema": {
        "$ref": "#/definitions/UserStats"
      }
    },
    "WatchInfo": {
      "description": "WatchInfo",
      "schema": {
        "$ref": "#/definitions/WatchInfo"
      }
    },
    "empty": {
      "description": "APIEmpty is an empty response"
    },
    "error": {
      "description": "APIError is error format response",
      "headers": {
        "message": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "forbidden": {
      "description": "APIForbiddenError is a forbidden error response",
      "headers": {
        "message": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "notFound": {
      "description": "APINotFound is a not found empty response"
    },
    "parameterBodies": {
      "description": "parameterBodies",
      "schema": {
        "$ref": "#/definitions/CreateRequestOption"
      }
    },
    "redirect": {
      "description": "APIRedirect is a redirect response"
    },
    "validationError": {
      "description": "APIValidationError is error format response related to input validation",
      "headers": {
        "message": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "AccessToken": {
      "type": "apiKey",
      "name": "access_token",
      "in": "query"
    },
    "AuthorizationHeaderToken": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "BasicAuth": {
      "type": "basic"
    },
    "SudoHeader": {
      "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
      "type": "apiKey",
      "name": "Sudo",
      "in": "header"
    },
    "SudoParam": {
      "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
      "type": "apiKey",
      "name": "sudo",
      "in": "query"
    },
    "Token": {
      "type": "apiKey",
      "name": "token",
      "in": "query"
    }
  },
  "security": [
    {
      "BasicAuth": []
    },
    {
      "Token": []
    },
    {
      "AccessToken": []
    },
    {
      "AuthorizationHeaderToken": []
    },
    {
      "SudoParam": []
    },
    {
      "SudoHeader": []
    }
  ]
}
